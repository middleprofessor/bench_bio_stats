# Linear models with two categorical $X$ -- Factorial linear models ("two-way ANOVA") { }

```{r}
#| label: twoway-setup
#| echo: false
#| message: false
#| warning: false

library(here)
library(janitor)
library(readxl)
library(data.table)
# library(broom)

# analysis packages
library(emmeans)
library(car) # qqplot, spreadlevel
library(afex)
library(lmerTest)
library(nlme)

# graphing and tabling packages
library(ggplot2) # ggplot environment
library(ggpubr) # publication ready plots
library(cowplot) # combine plots
library(knitr)
library(kableExtra) #tables
# library(equatiomatic) # removed from Cran

ggplot_the_model_path <- here::here("R/ggplot_the_model.R")
source(ggplot_the_model_path)

here <- here::here
clean_names <- janitor::clean_names
data_folder <- "data"
minus <- "\u2013"
```

```{r}
#| label: twoway-fig-sizes
#| echo: false
#| message: false
#| warning: false

dpi <- 72
# width of bookdown page is 800 pix
# width of standard bookdown fig is 560 pix or 70% of page
std_width <- 504/dpi # 7 in
full_width <- 800/dpi
small_scale = 6/7
small_width <- std_width*small_scale # 6 in

# standard aspect ratio is .7 so
std_ar <- 5/7 # .71
response_ar <- .8 # for use with response plots with p-values
effect_ar <- 0.6 # for effects
harrell_ar <- 1 # for harrell effect & response plots

# dims (width, height)
std_dim <- c(std_width, std_width*std_ar)
response_dim <- c(std_width, std_width*response_ar)
effect_dim <- c(std_width, std_width*effect_ar)
harrell_dim <- c(std_width, std_width*harrell_ar)
full_dim_three_eights <- c(full_width, full_width * 3/8)
full_dim_three_eights <- c(full_width, full_width * 0.5)

# out.width percents
out.width_std <- paste0(std_width/full_width*100, "%")
out.width_small <- paste0(small_width/full_width*100, "%")

```


```{r}
#| label: twoway-functions-coeffs
#| echo: false

  # X <- model.matrix(m1)
  # y_col <- insight::find_response(m1)
  # y <- model.frame(m1)[, y_col]
  # b <- (solve(t(X)%*%X)%*%t(X)%*%y)[,1]

  emm_b <- function(m1_emm){
    # works only for 2 x 2 and specs have to be in
    # same order as model
    if(!is.data.frame(m1_emm)){
      m1_emm <- summary(m1_emm)
    }
    mu <- m1_emm[, "emmean"]
    b <- c(mu[1],
            mu[2] - mu[1],
            mu[3] - mu[1],
            mu[4])
    b[4] <- b[4] - (b[1]+b[2]+b[3])
    return(b)
  }

```

## A linear model with crossed factors estimates interaction effects

A factorial experiment is one in which there are two or more factor variables (categorical $X$) that are **crossed**, resulting in a group for each combination of the levels of each factor. Each specific combination is a different treatment. A **linear model with crossed factors** is used to estimate **interaction effects**, which occur when the effect of the level of one factor is conditional on the level of the other factors. Estimation of the interaction effect is necessary for inferences about

1. "Something different" -- Estimation of a treatment effect relative to a control effect (Example 1 -- TLR9-/- mice)
2.  "It depends" -- Estimation of the effect of background condition on an effect (Example 2 -- XX mice)
3. "More than the sum of the parts" -- Estimation of **synergy**, a non-additive effect (Example 3 -- plant root growth)

Inferences like these are common in the experimental biology literature but they are made using the wrong statistics. The correct statistic -- the interaction effect -- is easy to compute but rarely computed.

::: {.callout-note title="NHST Blues"}
NHST encourages dichotomous thinking such as "there is or isn't an interaction effect." Dichotomous thinking can only lead to disasters of biblical proportion, dogs and cats living together. Interaction effects in biology are ubiquitous. Sometimes they are small enough to ignore.
:::

### An interaction is a difference in simple effects

In this chapter, I'll describe an interaction effect using different descriptions (Examples 1-3). Here, I want to emphasize that an interaction effect is a difference of differences. To clarify this, I'll introduce a fake experiment. A research group has evidence that a certain gene product (CGP) is an intermediary between intestinal microbiota and obesity. The researchers transfer feces from either lean mice or obese mice into either wildtype mice or CGP-/- mice to investigate the effect of microbiota and CGP on body weight. The design has two factors (donor and genotype), each with two levels (donor: "Lean", "Obese; genotype: "WT", "KO"), which makes this a $2 \times 2$ (crossed or factorial) design. There are $n=6$ replicates for each treatment.

A good way to visualize the treatment combinations in a crossed design is with a $m \times p$ table showing all combinations of the $m$ levels of factor 1 ($\texttt{donor}$) against the $p$ levels of factor 2 ($\texttt{genotype}$) (\@ref(tab:twoway-factorial-table)).

```{r}
#| label: twoway-factorial-table
#| echo: false
#| tbl-cap: Mean body weight of mice in four treatment groups of the 2 x 2 factorial experiment.
row_names <- c("Lean", "Obese", "Effect")
col_names <- c("WT", "KO", "Effect")
wt_col <- c(33.2, 41.9)
wt_col <- c(wt_col, wt_col[2] - wt_col[1])
ko_col <- c(34.1, 32.7)
ko_col <- c(ko_col, ko_col[2] - ko_col[1])
diff_col <- c(ko_col[1] - wt_col[1],
              ko_col[2] - wt_col[2],
              (ko_col[2] - wt_col[2]) - (ko_col[1] - wt_col[1]))

dat <- matrix(c(wt_col,
                ko_col,
                diff_col), nrow = 3)
colnames(dat) <- col_names
dt <- data.table(
  " " = row_names,
  dat
)
dt |>
  kable() |>
  kable_paper("hover", full_width = F) |>
  column_spec(1, bold = T) |>
  column_spec(4, bold = T,
              color = c("#696969", "#696969", "#FF0000")) |>
  row_spec(3, bold = T)

```

1. The upper-left $2 \times 2$ part of the table contains the fake mean body weight of each treatment group. These means are known as **cell means**.
2. The first two elements in the "Effect" column contains the difference of the two cells to the left -- these are the **effects of genotype conditional on the level of donor**.
3. The first two elements in the "Effect" row contains the difference of the two cells above -- these are the **effects of donor conditional on the level of genotype**.
4. The effects described in items 2 and 3 are known as the **simple effects**.
5. The value in red is the difference of the two simple effects above it. It is also the difference of the two simple effects to the left. These differences are equal. This is the interaction effect.
6. In an experiment with a single factor with four levels, all six pairwise comparisons may be of interest. In a $2 \times 2$ factorial experiment, it is the four simple effects and the interaction effect that should pique the interest of the researcher.

In this fake experiment, we want to know the effect of obese donor treatment in the KO mice *compared to* the effect of obese donor treatment in the WT mice. That is, we want the contrast of these two simple effects.

$$
(\operatorname{Obese KO} - \operatorname{Lean KO}) - (\operatorname{Obese WT} - \operatorname{Lean WT})
$$

This contrast is the interaction effect. **An interaction effect is a difference of differences**.

### A linear model with crossed factors includes interaction effects

The factorial linear model for the fake data is

$$
\begin{align}
\texttt{body\_weight} &= \beta_0\ + \\
&\quad \ \beta_1 (\texttt{donor}_{\texttt{Obese}})\ + \\
&\quad \ \beta_2 (\texttt{genotype}_{\texttt{KO}})\ + \\
&\quad \ \beta_3 (\texttt{donor}_{\texttt{Obese}} : \texttt{genotype}_{\texttt{KO}})
\end{align}
$$

What are the variables?

1. $\texttt{donor}_{\texttt{Obese}}$ is the indicator variable for the "Obese" level of the factor $\texttt{donor}$. It contains the value 1 if the donor was "Obese" and 0 otherwise.
2. $\texttt{genotype}_{\texttt{KO}}$ is the indicator variable for the "KO" level of the factor $\texttt{genotype}$. It contains the value 1 if the genotype is "KO" and 0 otherwise.
3. $\texttt{donor}_{\texttt{Obese}} : \texttt{genotype}_{\texttt{KO}}$ is the indicator variable for the interaction between the "Obese" level of $\texttt{donor}$ and the "KO" level of $\texttt{genotype}$. This ":" character to indicate interaction follows the R formula convention in the LME4 package. Many sources use a $\times$ symbol instead of the colon. The variable contains the value 1 if the mouse is assigned to both "Obese" and "KO" and 0 otherwise. This value is the product of the values in $\texttt{donor}_{\texttt{Obese}}$ and $\texttt{genotype}_{\texttt{KO}}$.

What are the parameters?

This linear model has set "Lean" as the reference level of $\texttt{donor}$ and "WT" as the reference level of $\texttt{genotype}$. This make the "Lean WT" mice the control.

1. $\beta_0$ is the true mean of the control, which is the "Lean WT" group.
2. $\beta_1$ is the true effect of donor in the WT mice (the effect of manipulating the donor factor but not the genotype factor). It is the difference between the true means of the "Obese WT" group and the "Lean WT" group.

The mean of the "Obese WT" group is $\beta_0 + \beta_1$. This is the expectation if we start with the control and then add the effect of Obese donor.

3. $\beta_2$ is the true effect of genotype in the mice given feces from lean donors  (the effect of manipulating the genotype factor but not the donor factor). It is the difference between the true means of the "Lean KO" group and the "Lean WT" group.

The mean of the "Lean KO" group is $\beta_0 + \beta_2$. This is the expectation if we start with the control and then add the effect of KO genotype.

4. $\beta_3$ is the true interaction effect of $\texttt{donor}_{\texttt{Obese}} : \texttt{genotype}_{\texttt{KO}}$

The mean of the "Obese KO" group is $\beta_0 + \beta_1 + \beta_2 + \beta_3$. The expected mean of the "Obese KO" group, *if the factors are additive, which means the interaction effect is zero*, is $\beta_0 + \beta_1 + \beta_2$. **The interaction effect is the difference between the actual mean of the "Obese KO" group and this additive mean**. The interaction effect is what's left-over, after you've added Obese effect and the KO effect to the control.

### factorial experiments are frequently analyzed as flattened linear models in the experimental biology literature

Often, researchers analyze data from a factorial experiment with a one-way ANOVA followed by pairwise tests (or by a simple series of separate *t*-tests). For the fake experiment, this linear model is

$$
\begin{align}
\texttt{body\_weight} &= \beta_0 \ + \\
& \quad \ \beta_1 (\texttt{treatment}_{\texttt{Obese}}) \ + \\
& \quad \ \beta_2 (\texttt{treatment}_{\texttt{KO}}) \ + \\
& \quad \ \beta_3 (\texttt{treatment}_{\texttt{Obese + KO}})
\end{align}
$$

I refer to this as a **flattened** model (the table of treatment combinations has been flattened into a single row). Inference from a factorial or flattened model is the same. We can get the same pairwise contrasts or interaction contrasts from either model. That said, a factorial model nudges researchers to think about the analysis as a factorial design, which is good, because interaction effects are an explicit component of a factorial model.

## Example 1 -- Estimation of a treatment effect relative to a control effect ("Something different")  (Experiment 2j glucose uptake data)

To introduce a linear model with crossed factors (categorical $X$ variables), I'll use data from a set of experiments designed to measure the effect of the toll-like receptor protein TLR9 on the activation of excercise-induced AMP-activated protein kinase (AMPK) and downstream sequelae of this activation, including glucose transport (from outside to inside the cell) by skeletal muscle cells.

Article source: [TLR9 and beclin 1 crosstalk regulates muscle AMPK activation in exercise](https://www.nature.com/articles/s41586-020-1992-7){target="_blank"}

[Public source](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7047589/){target="_blank"}

The data are from multiple experiments in Figure 2.

[Data source](https://www.nature.com/articles/s41586-020-1992-7#Sec27){target="_blank"}

```{r}
#| label: twoway-exp2j-import
#| echo: false
data_from <- "TLR9 and beclin 1 crosstalk regulates muscle AMPK activation in exercise"
file_name <- "41586_2020_1992_MOESM4_ESM.xlsx"

file_path <- here(data_folder, data_from, file_name)

treatment_levels  <- c("WT Rest",
                       "WT Active",
                       "KO Rest",
                       "KO Active")
exp2j_wide <- read_excel(file_path,
                         sheet = "2j",
                         range = "A5:D13",
                         col_names = TRUE) |>
  data.table()

colnames(exp2j_wide) <- treatment_levels

exp2j <- melt(exp2j_wide,
              measure.vars = treatment_levels,
              variable.name = "treatment",
              value.name = "glucose_uptake") |>
  na.omit() # danger!

exp2j[, c("genotype", "stimulation") := tstrsplit(treatment,
                                                  " ",
                                                  fixed = TRUE)]

genotype_levels <- c("WT", "KO")
stimulation_levels <- c("Rest", "Active")
exp2j[, genotype := factor(genotype,
                           levels = genotype_levels)]
exp2j[, stimulation := factor(stimulation,
                              levels = stimulation_levels)]
# View(exp2j)
```

### Understand the experimental design {#twoway-understand1}

**Background**. Exercise (muscle activity) stimulates AMPK activated glucose uptake (transport from outside to inside the muscle cell). Instead of natural exercise, which can stimulate multiple systems, the researchers directly activate the muscle with electrical stimulation.

**Research question** There are two ways to think about the question -- both produce the same answer.

1. How much does TLR9 knockout inhibit the expected increase of glucose uptake following electrical stimulation? The expected increase comes from the contrast of the positive and negative controls. Call this the knockout-induced stimulation effect. 
2. How much does TLR9 knockout inhibit glucose uptake during muscle stimulation compared to effect of TLR9 knockout during muscle rest? Call this the **stimulation-induced TLR9-/- effect**. 

**Response variable** $\texttt{glucose\_uptake}$ (nmol per mg protein per 15 min) -- the rate of glucose transported into the cell.

**Factor 1** -- $\texttt{genotype}$ ("WT", "KO").

* "WT" (reference level) -- C57BL/6J mice with intact TLR gene (TLR+/+)
* "KO" -- TLR-/- mice on a C57BL/6J background

**Factor 2** $\texttt{stimulation}$ ("Rest", "Active") -- Two levels:

* "Rest" (reference level) -- muscle that has not been stimulated.
* "Active" -- electrical stimulation of muscle to induce contraction and contractile-related cell changes

These two factors create the three control treatments and the one focal treatment:

* "WT Rest" -- **Negative control**. Expect non-exercise (low) level uptake.

* "WT Active" -- **Positive control**. Expect high uptake.

* "KO Rest" -- **Method control**. Unsure of KO effect on uptake in Rest, which is why we need this control.

* "KO Active" -- **Focal treatment**. At about same level of KO/Rest if TLR9-/- completely inhibits electrical stimulation of glucose uptake

**Design** -- $2 \times 2$, that is, two crossed factors each with two levels. This results in four groups, each with a unique combination of the levels from each factor.

**Planned Contrasts**

The two ways of framing the research question suggest either of the following sets of contrasts. Both ways of framing generate a **treatment** contrast that includes the focal treatment and a **control contrast** that does not include the focal treatment. The question pursued by the experiment is addressed with the contrast of the treatment and control contrasts, which is is the estimate of the interaction effect. There is no difference in inference between the two ways of framing the question -- the interaction effects are equivalent. The two framings simply give two different ways of viewing an interaction effect.

**Framing 1**: How much does TLR9 knockout inhibit the expected increase of glucose uptake during stimulation?

1. (KO Active - KO Rest) -- effect of Stimulation in KO mice. This is our **treatment contrast**. If TLR9 is necessary for glucose uptake, then this should be zero. If positive, there are non-TLR9 paths.
 
2. (WT Active - WT Rest) -- This is the **positive control contrast** -- it is what we know based on prior knowledge and what we want to compare the treatment effect to. This should be positive based on prior knowledge.

We need to control for the expected increase in 2 using the contrast:

3. (KO Active - KO Rest) - (WT Active - WT Rest) -- This contrast is the interaction effect. This **focal contrast** is what we need to estimate the knockout-induced stimulation effect.

**Framing 2**: What is stimulation-induced TLR9-/- effect?

1. (KO Active - WT Active) -- effect of KO during muscle stimulation. This is our **treatment contrast**. If TLR9 is necessary for glucose uptake, then this should be big and negative *if* the KO effect at rest is small.
 
2. (KO Rest - WT Rest) -- effect of KO when the muscle is not stimulated. This is the **methodological control contrast**. If TLR9-/- KO has non-muscle-stimulation paths to glucose uptake, this will be something other than zero.

We need to control for any (KO Rest - WT Rest) effect using the contrast:

3. (KO Active - WT Active) - (KO Rest - WT Rest) -- This contrast is the interaction effect. This **focal contrast** is what we need to estimate the stimulation-induced TLR9-/- effect.

Our planned contrasts are:

1. (WT Active - WT Rest) -- positive control contrast
2. (KO Rest - WT Rest) -- methodological control contrast
3. (KO Active - WT Active) -- treatment contrast
4. (KO Active - WT Active) - (KO Rest - WT Rest) -- interaction contrast

### Fit the linear model

```{r}
#| label: twoway-exp2j_m1
#| echo: true
exp2j_m1 <- lm(glucose_uptake ~ stimulation * genotype,
               data = exp2j)

```

### Inference {#twoway-exp2j-inf}

**The coefficient table**

```{r}
#| label: twoway-exp2j_m1_coef
#| echo: true
exp2j_m1_coef <- tidy(exp2j_m1, conf.int = TRUE)

exp2j_m1_coef |>
  kable(digits = c(1,2,3,1,4,2,2)) |>
  kable_styling()
```

**emmeans table**

```{r}
#| label: twoway-exp2j_m1_emm
#| echo: true
exp2j_m1_emm <- emmeans(exp2j_m1,
                          specs = c("stimulation", "genotype"))
exp2j_m1_emm |>
  kable(digits = c(1,1,2,3,1,2,2)) |>
  kable_styling()
  
```

**The contrasts table**

```{r}
#| label: twoway-exp2j_m1_planned
#| echo: true
# exp2j_m1_emm # print in console to get row numbers
# set the mean as the row number from the emmeans table
wt_rest <- c(1,0,0,0)
wt_active <- c(0,1,0,0)
ko_rest <- c(0,0,1,0)
ko_active <- c(0,0,0,1)

# contrasts are the difference in the vectors created above
# these planned contrasts are described above
# 1. (WT/Active - WT/Rest) -- positive control contrast
# 2. (KO/Rest - WT/Rest) -- methodological control contrast
# 3. (KO/Active - WT/Active) -- treatment contrast
# 4. (KO/Active - WT/Active) - (KO/Rest - WT/Rest) -- interaction 

exp2j_m1_planned <- contrast(
  exp2j_m1_emm,
  method = list(
    "(WT/Active - WT/Rest)" = c(wt_active - wt_rest),
    "(KO/Rest - WT/Rest)" = c(ko_rest - wt_rest),
    "(KO/Active - WT/Active)" = c(ko_active - wt_active),
    "KO:Active Ixn" = c(ko_active - wt_active) -
      (ko_rest - wt_rest)
  ),
  adjust = "none"
) |>
  summary(infer = TRUE)


exp2j_m1_planned |>
  kable(digits = c(0,3,4,0,3,3,2,5)) |>
  kable_styling()

# double check with automated contrasts
# contrast(exp2b.2_m1_emm, method = c("revpairwise"))

```

### Plot the model

```{r}
#| label: twoway-exp2j_m1_plot
#| echo: true
#| fig.dim: harrell_dim*small_scale

ggplot_the_model(
  exp2j_m1,
  exp2j_m1_emm,
  exp2j_m1_planned,
  palette = pal_okabe_ito_blue,
  legend_position = "bottom",
  y_label = "Glucose uptake\n(nmol per mg protein\nper 15 min)",
  effect_label = "Difference in glucose uptake",
  rel_heights = c(0.44,1),
)
```

### alternaPlot the model

```{r twoway-exp2j-altplot, echo=TRUE, eval=TRUE, fig.dim=response_dim*small_scale, fig.cap = "Dashed gray line is expected additive mean of KO/Active"}

exp2j_m1_pairs <- contrast(exp2j_m1_emm,
                           method = "revpairwise",
                           simple = "each",
                           combine = TRUE,
                           adjust = "none") |>
  summary(infer = TRUE)
b <- emm_b(exp2j_m1_emm)
dodge_width <- 0.4
gg <- ggplot_the_response(
  exp2j_m1,
  exp2j_m1_emm,
  exp2j_m1_pairs[c(1,3,4),],
  palette = pal_okabe_ito_blue,
  legend_position = "bottom",
  y_label = "Glucose uptake\n(nmol per mg protein\nper 15 min)",
  y_pos = c(13.6, 13.2, 13.3)
) +
  geom_segment(x = 2 + dodge_width/2 - 0.05,
               y = b[1] + b[2] + b[3],
               xend = 2 + dodge_width/2 + 0.05,
               yend = b[1] + b[2] + b[3],
               linetype = "dashed",
               color = "gray") +
  geom_bracket(
    x = 2.25,
    y = b[1] + b[2] + b[3],
    yend = b[1] + b[2] + b[3] + b[4],
    label = paste0("ixn p = ",
                  fmt_p_value_rmd(exp2j_m1_planned[4,"p.value"])),
    text.size = 3,
    text.hjust = 0,
    color = "black") +
  NULL

gg
```

## Understanding the linear model with crossed factors 1

Researchers in experimental biology report almost exclusively the *p*-values of the simple effects (Table \@ref(tab:twoway-factorial-table)) in data from factorial experiments. These can be computed even if the data are flattened into a single "treatment" factor. But it is the interaction effect that is necessary to make many of the inferences made by the researchers. To see why, we need to understand what the coefficients in the coefficient table are.

### What the coefficients are {#twoway-what-coefs-are}

To understand the coefficients, it helps to use the means in the emmeans table to construct a factorial table of the cell means

```{r twoway-exp2j-cellmeans, echo=FALSE}
col_names <- levels(exp2j$stimulation)
row_names <- levels(exp2j$genotype)
values <- summary(exp2j_m1_emm)$emmean
labels <- as.character(round(values,2))
labels <- round(values,2)
dt <- data.table(
    " " = row_names,
    Rest = labels[1:2],
    Active = labels[3:4]
)


dt |>
  kable("html", escape = F,
        digits = 2,
        caption = "Cell mean table") |>
  kable_paper("hover", full_width = F) |>
  column_spec(1, bold = T)

```

The linear model fit to the $\texttt{exp2j}$ data is

$$
\begin{align}
\texttt{glucose\_uptake} &= \beta_{0} \ + \\
&\quad \ \beta_{1}(\texttt{stimulation}_{\texttt{Active}}) \ + \\
&\quad \ \beta_{2}(\texttt{genotype}_{\texttt{KO}}) \ + \\
&\quad \ \beta_{3}(\texttt{stimulation}_{\texttt{Active}} : \texttt{genotype}_{\texttt{KO}})
\end{align}
$$

and the fit coefficients are

```{r twoway-exp2j_m1_coef-explainer, echo=FALSE}
exp2j_m1_coef |>
  kable(digits = c(3,4,2,4,3,3)) |>
  kable_styling()  
```

Explainer

1. Understand what the rows of the coefficient table are. There are four parameters in the fit linear model -- the rows are the statistics for the estimates of these parameters. These estimates are the **coefficients** of the model.
2. The $\texttt{(Intercept)}$ ($b_0$) is the mean $\texttt{glucose\_uptake}$ of the reference level, which was set to the WT/Rest group (Figure \@ref(fig:twoway-what-coefs-are)). This is the mean in the upper left cell in Table \@ref(tab:twoway-exp2j-cellmeans).
3. The $\texttt{stimulationActive}$ coefficient ($b_2$) is the estimate of the **the added effect of Stimulation when the genotype factor is at its reference level**, and so is the mean in the upper right cell minus the mean in the upper left cell in Table \@ref(tab:twoway-exp2j-cellmeans). This coefficient is not a mean -- it is a difference of means (Figure \@ref(fig:twoway-what-coefs-are)). The mean of the WT/Active group is $b_0 + b_2$.
4. The $\texttt{genotypeKO}$ coefficient ($b_1$) is the estimate of the **the added effect of knocking out TLR9 when the stimulation factor is at its reference level**, and so is the mean in the lower left cell minus the mean in the upper left cell in Table \@ref(tab:twoway-exp2j-cellmeans). This coefficient is not a mean -- it is a difference of means (Figure \@ref(fig:twoway-what-coefs-are)). The mean of the KO/Rest group is $b_0 + b_1$.
5. The $\texttt{stimulationActive:genotypeKO}$ coefficient ($b_3$) is the estimate of the interaction effect between $\texttt{genotype}$ and $\texttt{stimulation}$. It is *not* the mean in the lower right cell minus the mean in the upper left cell. Instead, **it is the mean in the lower right cell minus the expected mean in the lower right cell if the genotype and activity treatment effects were additive**. The expected additive-mean in the lower right cell (KO/Active) is $b_0 + b_1 + b_2$. The mean of KO/stimulation is $b_0 + b_1 + b_2 + b_3$ (Figure \@ref(fig:twoway-what-coefs-are)).
6. The interaction effect is a **non-additive effect**. Think about this. Adding the Stimulation alone adds 3.45 nmol glucose per protein per 15 min to the uptake rate of the reference. Adding "KO" alone adds 0.78 glucose per protein per 15 min to the uptake rate of the reference. If these effects were purely additive, then adding both Stimulation and KO to the reference rate should result in a mean of 6.75 + 3.45 + 0.78 = 10.98 glucose per protein per 15 min. The modeled mean for KO/Active is 8.67 glucose per protein per 15 min. The difference observed - additive is 8.67 - 10.98 = -2.31 glucose per protein per 15 min. Compare this difference to the interaction coefficient in the coefficient table.
7. Reinforce your understanding of "non-additive" in item 5. The interaction is a non-additive effect because the mean of the combined treatment is something different than if we were to just add the KO and Active effects. But this effect is additive in the linear model. This is what linear models are -- a reference mean plus the sum of a bunch of effects.
8. Understand what these rows **are not**. The $\texttt{stimulationActive}$ row is not the same as the "stimulation" term in a Type III ANOVA table (the ANOVA table produced in GraphPad Prism or JMP). The *p*-values will be different because the *p*-values are testing different hypotheses. In the coefficient table, the $\texttt{stimulationActive}$ *p*-value is testing the difference of the means of WT/Active and WT/Rest. The stimulation term in a Type III ANOVA table is testing if there is an overall stimulation effect, which is estimated as the average of the two stimulation contrasts (WT/Active - WT/Rest) and (KO/Active - KO/Rest). The average of these two contrasts is not often of interest (but sometimes is -- see below).

```{r}
#| label: twoway-what-coefs-are-build
#| echo: false
#| warning: false
#| message: false
b <- emm_b(exp2j_m1_emm)
exp2j_m1_emm_dt <- summary(exp2j_m1_emm) |>
  data.table()

dodge_width <- 0.0
pd <- position_dodge(dodge_width)
gg_ixn_explainer_base <- ggplot(data = exp2j_m1_emm_dt,
             aes(x = stimulation,
                 y = emmean,
                 color = genotype)) +
  
  # add individual points in the backgound
  geom_jitter(data = exp2j,
             aes(y = glucose_uptake,
                 color = genotype),
             alpha = .3,
             width = 0.1) +
  
  geom_hline(yintercept = b[1],
             linetype = "dashed",
             color = "black",
             alpha = 0.5) +
  
  geom_point(size = 3,
             position = pd) +
  scale_color_manual(values = pal_okabe_ito_blue) +
#  scale_x_discrete(labels = c("WT", "TLR9-/-")) +
  ylab(expression(paste("Glucose uptake (nmol mg ", protein^-1, "15 ", min^-1, ")"))) +
  coord_cartesian(ylim = c(5.0, 11.5)) +
  
  geom_line(aes(group = genotype),
            position = pd) +
  
  # additive line
  geom_segment(aes(
    x = 1 + dodge_width/4,
    y = b[1] + b[3],
    xend = 2 + dodge_width/4,
    yend = b[1] + b[2] + b[3]),
    color = pal_okabe_ito_blue[2],
    linetype = "dashed",
    alpha = 0.2
  ) +

  # additive point
  geom_point(aes(
    x = 2 + dodge_width/4,
    y = b[1] + b[2] + b[3]),
    size = 3,
    shape = 21,
    color = pal_okabe_ito_blue[2],
    fill = "white") +
  
  theme_pubr() +
  theme(axis.title.x = element_blank(),
        legend.title = element_blank()) +
  
  NULL

gg_ixn_explainer <- gg_ixn_explainer_base +

  # additive annotation
  annotate(
    geom = "text",
    x = c(2.13, 2.13),
    y = c(b[1] + b[2] + b[3],
          b[1] + b[2] + b[3] + b[4]),
    label = c("Expected mean of\nKO/Active if\ninteraction is 0.0",
              "mean of\nKO/Active"),
    hjust = 0,
    size = 3,
    color = "darkgray"
  ) +


  # coefficient labels
  annotate(
    geom = "text",
    x = c(.52),
    y = c(b[1] + 0.2),
    label = c("b[0]"),
    parse = TRUE,
  ) +

  # b0 arrow
  geom_segment(aes(x = 0.65,
                   y = b[1],
                   xend = 0.4,
                   yend = b[1]),
               color = "black",
               arrow = arrow(length  =  unit(0.05, "npc"),
                             ends = "last",type = "open")) +

  NULL

nudge <- 0.05
tip_length <- 0.01

gg_ixn_explainer <- gg_ixn_explainer +
  geom_bracket(x = 2 + nudge,
               y = b[1],
               yend = b[1]+b[2],
               tip.length = tip_length,
               label = "b[1]",
               text.size = 4,
               text.hjust = 0,
               text.vjust = 0.33,
               parse = TRUE,
               color = "black") +
  geom_bracket(x = 1 - nudge,
               y = b[1],
               yend = b[1]+b[3],
               tip.length = -tip_length,
               label = "b[2]",
               text.size = 4,
               text.nudge_x = -0.02,
               text.hjust = 1,
               parse = TRUE,
               color = "black") +
  geom_bracket(x = 2 + 2*nudge,
               y = b[1]+b[2]+b[3],
               yend = b[1]+b[2]+b[3]+b[4],
               tip.length = tip_length,
               label = "b[3]",
               text.size = 4,
               text.hjust = 0,
               parse = TRUE,
               color = "black") +
NULL

# image_path <- here("images", "twoway-what_coefs_are.png")
# ggsave(image_path,
#        width = std_width,
#        height = std_width*std_ar,
#        units = "in")
# 
# gg_ixn_explainer

```



```{r}
#| label: twoway-what-coefs-are
#| echo: false
#| warning: false
#| message: false
#| fig.dim: std_dim
#| fig-cap: "The coefficients of a linear model with two crossed factors, explained."

# image_path <- here("images", "twoway-what_coefs_are.png")
# knitr::include_graphics(image_path)

gg_ixn_explainer

```

### The interaction effect is something different

Item 6 in the coefficient table explainer stated "The interaction is a non-additive effect because the mean of the combined treatment is **something different** than if we were to just add the KO and Active effects. The something different is the interaction effect. If the interaction effect were zero, the expected effect of stimulation in the KO mice would be the same as the expected effect of stimulation in the WT mice (Figure \@ref(fig:twoway-something-different). This would suggest the underlying physiological changes between Rest and Active in the KO mice is "more of the same" physiological changes in the WT mice. But, because of the interaction, the underlying physiological changes between Rest and Active in the KO mice is "something different" to that of physiological changes in the WT mice (Figure \@ref(fig:twoway-something-different)).

The biological reasons causing interaction effects are highly variable and are what makes Biology fun. Additive effects (no interaction) may occur when combined treatments act independently of each other. This might occur in the glucose uptake response if knocking out TLR9 opens a path to glucose uptake that is different from and independent of the paths activated by electrial stimulation. Positive, or **synergistic** interaction effects may occur when combined treatments augment each other's ability to affect the response (see Example 3 below). This could occur in the glucose uptake response if knocking out TLR9 opens a path to glucose uptake that is different the paths activated by electrial stimulation but also makes the paths activated by stimulation more sensitive to stimulation. Negative, or **antagonistic** interaction effects may occur when combined treatments interfere with each other's ability to affect the response. This could occur in the glucose uptake response if TLR9 is on the path from stimulation to glucose uptake. Knocking out TLR9 interferes with this path. If TLR9 is required, we'd expect the interaction effect to be the same magnitude but opposite sign of the control effect -- that is, complete antagonism of the control effect. Previous experiments suggested this negative interaction. The measurement of this effect was the purpose of experiment $\texttt{exp2j}$.

```{r}
#| label: twoway-something-different-build
#| echo: false
#| warning: false
#| message: false
nudge <- 0.05
tip_length <- 0.01
gg_something_different <- gg_ixn_explainer_base +
  geom_bracket(x = 2 + nudge,
               y = b[1],
               yend = b[1] + b[2]-0.05,
               tip.length = tip_length,
               label = "1. what stimulation\ndoes in WT",
               text.size = 3,
               text.hjust = 0,
               text.vjust = 0.25,
               color = "black") +
  geom_bracket(x = 1 - nudge,
               y = b[1],
               yend = b[1] + b[3],
               tip.length = -tip_length,
               label = "2. what KO\ndoes in Rest",
               text.nudge_x = -0.02,
               text.size = 3,
               text.hjust = 1,
               color = "black") +
  geom_bracket(x = 2 + 1*nudge,
               y = b[1]+b[2]+0.05,
               yend = b[1]+b[2]+b[3],
               tip.length = tip_length,
               label = "3. expected\n difference if\n more of 1 & 2",
               text.size = 3,
               text.hjust = 0,
               text.vjust = 0.6,
               color = "black") +
  geom_bracket(x = 2 + 2*nudge,
               y = b[1]+b[2],
               yend = b[1]+b[2]+b[3]+b[4],
               tip.length = tip_length,
               label = "4. observed\ndifference",
               text.size = 3,
               text.hjust = 0,
               color = "black") +
  geom_bracket(x = 2.4,
               y = b[1]+b[2]+b[3]+b[4],
               yend = b[1]+b[2]+b[3],
               tip.length = tip_length,
               label = "5. something\ndifferent",
               text.size = 3,
               text.hjust = 0,
               text.vjust = 0.5,
               color = "black") +
  expand_limits(x = 2.75) +
  NULL  

# image_path <- here("images", "twoway-something-different.png")
# ggsave(image_path,
#        width = 7,
#        height = 5,
#        units = "in")
# 
# gg_something_different

```

```{r twoway-something-different, echo=FALSE, fig.dim=std_dim, fig.cap = }
#| label: twoway-something-different
#| echo: false
#| warning: false
#| message: false
#| fig.dim: std_dim
#| fig-cap: "The interaction is something different, not more of the same. To get the observed difference (4), take the expected difference (3) and add something different (5)."

# image_path <- here("images", "twoway-something-different.png")
# knitr::include_graphics(image_path)

gg_something_different

```

### Why we want to compare the treatment effect to a control effect

The purpose of the experiment is to infer a TLR9 role in the regulation of muscle-stimulated glucose transport, that is, a **stimulation-induced TLR9-/- effect**. If TLR9 is in the pathway from muscle activity to glucose transport, we expect some kind of recovery to baseline (Rest) values in the KO/Active group. But TLR9 may also (or alternatively) have a role in non-stimulation-induced glucose uptake.

How do we make an inference about a stimulation-induced TLR9-/- effect using this experiment? Researchers typically look at the **treatment effect**

(KO/Active - WT/Active)

and conclude a stimulation-induced TLR9-/- effect if it's big (and negative)

If the treatment effect is the correct contrast for inference, why bother with the measures of glucose uptake during Rest? The reason the treatment effect alone is the wrong contrast for inferring the *stimulation-induced* TLR9 effect is because it is confounded by the **control effect**, which is the contrast (KO/Rest - WT/Rest) (Figure \@ref(fig:twoway-what-we-want)).

```{r}
#| label: twoway-what-we-want-build
#| echo: false
#| warning: false
#| message: false
b <- emm_b(exp2j_m1_emm)
nudge <- 0.05
tip_length <- 0.01

gg_what_we_want <- gg_ixn_explainer_base +
  geom_bracket(x = 1 - nudge,
               y = b[1],
               yend = b[1] + b[3],
               tip.length = -tip_length,
               label = "1. what KO does\nin Rest (confounder)",
               text.nudge_x = -0.02,
               text.size = 3,
               text.hjust = 1,
               color = "black") +
  geom_bracket(x = 2 + 2*nudge,
               y = b[1] + b[2],
               yend = b[1] + b[2] + b[3] + b[4],
               tip.length = tip_length,
               label = "2. wrong contrast\n(confounded by 1)",
               text.size = 3,
               text.hjust = 0,
               text.vjust = 0.5,
               color = "black") +
  geom_bracket(x = 2 + 1*nudge,
               y = b[1]+b[2]+b[3],
               yend = b[1]+b[2]+b[3]+b[4],
               tip.length = tip_length,
               label = "3. correct contrast\n(unconfounded by 1)",
               text.size = 3,
               text.hjust = 0,
               text.vjust = 0.1,
               color = "black") +
  
  NULL

# image_path <- here("images", "twoway-what-we-want.png")
# ggsave(image_path,
#        width = 7,
#        height = 5,
#        units = "in")
# 
# gg_what_we_want

```

```{r}
#| label: twoway-what-we-want
#| echo: false
#| warning: false
#| message: false
#| fig.dim: std_dim
#| fig-cap: "Why the interaction effect is the stimulation-induced TLR9-/- effect"

# image_path <- here("images", "twoway-what-we-want.png")
# knitr::include_graphics(image_path)
gg_what_we_want
```

To unconfound the inference, subtract the confounder:

(KO/Active - WT/Active) - (KO/Rest - WT/Rest)

This is the interaction effect. Consequences of interpreting the treatment effect KO/Active - WT/Active as the stimulation-induced TLR9-/- effect are highlighted in Figure \@ref(fig:twoway-scenarios). In these plots, the data are those from $\texttt{exp2j}$ but with the values in the KO groups shifted up or down to create the scenarios.

Scenario 1. The positive control has big effect AND KO has no effect during rest AND the stimulation-induced TLR9-/- effect is equal in magnitude but opposite direction to the Active effect in WT (Figure \@ref(fig:twoway-scenarios)A). The stimulation-induced TLR9-/- effect is conspicuous from the plot, if our sample means are close to the true means and we have high precision. The simple effect measures the stimulation-induced TLR9-/- effect correctly -- but this is because the  simple effect is equal in magnitude (but opposite sign) to the interaction effect. Many experiments in the literature are pretty similar to this scenario.

Scenario 2. The positive control has big effect AND KO has a negative effect during rest BUT there is zero stimulation-induced TLR9-/- effect -- that is, the interaction is zero (Figure \@ref(fig:twoway-scenarios)B). There is an effect of KO during stimulation but this effect is no different that that occuring during Rest. So this cannot be a *contraction induced* TLR9 effect. Simple effect 1 *inflates* the effect.

Scenario 3. The positive control has big effect AND KO has a positive effect during rest AND there is a stimulation-induced TLR9-/- effect that is equal to that in scenario 1 (Figure \@ref(fig:twoway-scenarios)C). The positive effect of KO during Rest masks the stimulation-induced TLR9-/- effect. The simple effect *underestimates* the stimulation-induced TLR9-/- effect. This is similar to what is happening in Experiment 2j.

```{r}
#| label: twoway-scenarios-build
#| echo: false
#| warning: false
#| message: false

gg_plot_it <- function(fit,
                       fit_emm,
                       fit_pairs){
  b <- emm_b(fit_emm)

  x_pos <- c(2.5, 3)
  y_pos <- c(b[1] + b[2], b[1] + b[2] + b[3])
  nudge_x <- .12
  
  gg <- ggplot_the_response(fit,
                            fit_emm,
                            fit_pairs,
                            y_label = "glucose uptake",
                            g_label = "none",
                            palette = pal_okabe_ito_blue,
                            contrast_rows = "none") +
    coord_cartesian(xlim = c(0.5, 3)) +
    
    geom_bracket(x = 2.5,
                 y = b[1] + b[2],
                 yend = b[1] + b[2] + b[3] + b[4],
                 tip.length = 0.03,
                 label = "simple",
                 text.nudge_x = nudge_x,
                 text.size = 3,
                 text.angle = 90,
                 color = "black") +
    geom_bracket(x = 3,
                 y = b[1] + b[2] + b[3],
                 yend = b[1] + b[2] + b[3] + b[4],
                 tip.length = 0.03,
                 label = "interaction",
                 text.nudge_x = nudge_x,
                 text.size = 3,
                 text.angle = 90,
                 color = "black") +
    
    # annotate(geom = "text",
    #          x = x_pos,
    #          y = c(max(y_pos) + .2, max(y_pos) + .2),
    #          label = c("Simple", "Interaction"),
    #          size = 3,
    #          angle = 90,
    #          hjust = 0)
    
    NULL
  return(gg)
}

fake_exp2j <- copy(exp2j)

# observed
fake_exp2j[, scen0 := glucose_uptake]
m0 <- lm(scen0 ~ stimulation * genotype, data = fake_exp2j)
m0_emm <- emmeans(m0, specs = c("stimulation", "genotype"))
m0_pairs <- contrast(m0_emm,
                     method = "revpairwise",
                     simple = "each",
                     combine = TRUE,
                     adjust = "none")
gg0 <- gg_plot_it(m0, m0_emm, m0_pairs)


b <- emm_b(exp2j_m1_emm)

# scenario 1 - ixn = - effect
fake_exp2j[, scen1 := glucose_uptake]
fake_exp2j[treatment == "KO Rest", scen1 := scen1 - b[3]]
fake_exp2j[treatment == "KO Active", scen1 := scen1 - (b[2]+b[3]+b[4])]

m1 <- lm(scen1 ~ stimulation * genotype, data = fake_exp2j)
m1_emm <- emmeans(m1, specs = c("stimulation", "genotype"))
m1_pairs <- contrast(m1_emm,
                     method = "revpairwise",
                     simple = "each",
                     combine = TRUE,
                     adjust = "none")
gg1 <- gg_plot_it(m1, m1_emm, m1_pairs)

# scenario 2 - ixn = 0 with negative effect
b2 <- 1
b3 <- -0.5
fake_exp2j[, scen2 := glucose_uptake]
fake_exp2j[treatment == "WT Active",
           scen2 := scen2 - (1-b2)*b[2]]
fake_exp2j[treatment == "KO Rest",
           scen2 := scen2 - b[3] + b3*b2*b[2]]
fake_exp2j[treatment == "KO Active",
           scen2 := scen2 - (b[2]+b[3]+b[4]) + b3*b2*b[2] + b[2]]

m2 <- lm(scen2 ~ stimulation * genotype, data = fake_exp2j)
m2_emm <- emmeans(m2, specs = c("stimulation", "genotype"))
m2_pairs <- contrast(m2_emm,
                     method = "revpairwise",
                     simple = "each",
                     combine = TRUE,
                     adjust = "none")
gg2 <- gg_plot_it(m2, m2_emm, m2_pairs)

# scenario 3 - ixn = 1/2 effect
b2 <- 1
b3 <- 0.5 # relative to b2
fake_exp2j[, scen3 := glucose_uptake]
fake_exp2j[treatment == "WT Active",
           scen3 := scen3 - (1-b2)*b[2]]
fake_exp2j[treatment == "KO Rest",
           scen3 := scen3 - b[3] + b3*b2*b[2]]
fake_exp2j[treatment == "KO Active",
           scen3 := scen3 - (b[2]+b[3]+b[4]) + b3*b2*b[2]]

m3 <- lm(scen3 ~ stimulation * genotype, data = fake_exp2j)
m3_emm <- emmeans(m3, specs = c("stimulation", "genotype"))
m3_pairs <- contrast(m3_emm,
                     method = "revpairwise",
                     simple = "each",
                     combine = TRUE,
                     adjust = "none")
gg3 <- gg_plot_it(m3, m3_emm, m3_pairs)

gg_scenarios <- plot_grid(gg1, gg2, gg3, ncol = 3, labels = "AUTO")

image_path <- here("images", "twoway-scenarios.png")
# ggsave(image_path,
#        width = 7,
#        height = 5,
#        units = "in")

# png(image_path,
#     width = 800,
#     height = 300,
#     units = "px") 
#   gg_scenarios
# dev.off() 

# gg_scenarios

```

```{r}
#| label: twoway-scenarios
#| echo: false
#| warning: false
#| message: false
#| fig.dim: full_dim_three_eights
#| fig-cap: "Scenarios to show the consequence of inferring the stimulation-induced TLR9-/- effect from the simple effect (KO Active - WT Active). The simple effect and interaction effect lines extend from the KO Active mean to either the KO Rest mean (simple) or the expected mean of KO Active if the two factors were additive (interaction)."

# image_path <- here("images", "twoway-scenarios.png")
# knitr::include_graphics(image_path)
gg_scenarios
```

### The order of the factors in the model tells the same story differently

The order of the factors in the model formula doesn't matter for the coefficients, the estimated marginal means, or the contrasts. It can matter for ANOVA (more on this below) but not "tests after ANOVA". But the order does matter to how the researchers communicates the results to themselves and in the report (Figure \@ref(fig:twoway-same-story)). The order is also a natural consequence of the [two different ways of framing the research question](#twoway-understand1).

```{r}
#| label: twoway-same-story-build
#| echo: false
#| warning: false
#| message: false

same_story_build_gg <- function(){
  m1 <- lm(glucose_uptake ~ genotype * stimulation,
           data = exp2j)
  m1_emm <- emmeans(m1, specs = c("genotype", "stimulation"))
  b <- emm_b(m1_emm)
  m1_emm_dt <- summary(m1_emm) |>
    data.table()
  
  dodge_width <- 0.0
  pd <- position_dodge(dodge_width)
  gg <- ggplot(data = m1_emm_dt,
                        aes(x = genotype,
                            y = emmean,
                            color = stimulation)) +
    
    # add individual points in the backgound
    geom_jitter(data = exp2j,
                aes(y = glucose_uptake,
                    color = stimulation),
                alpha = .3,
                width = 0.1) +
    
    geom_hline(yintercept = b[1],
               linetype = "dashed",
               color = "black",
               alpha = 0.5) +
    
    geom_point(size = 3,
               position = pd) +
    scale_color_manual(values = pal_okabe_ito_blue) +
    #  scale_x_discrete(labels = c("WT", "TLR9-/-")) +
    ylab(expression(paste("Glucose uptake (nmol mg ", protein^-1, "15 ", min^-1, ")"))) +
    coord_cartesian(ylim = c(5.0, 11.5)) +
    
    geom_line(aes(group = stimulation),
              position = pd) +
    
    # additive line
    geom_segment(aes(
      x = 1 + dodge_width/4,
      y = b[1] + b[3],
      xend = 2 + dodge_width/4,
      yend = b[1] + b[2] + b[3]),
      color = pal_okabe_ito_blue[2],
      linetype = "dashed",
      alpha = 0.2
    ) +
    
    # additive point
    geom_point(aes(
      x = 2 + dodge_width/4,
      y = b[1] + b[2] + b[3]),
      size = 3,
      shape = 21,
      color = pal_okabe_ito_blue[2],
      fill = "white") +
    
    theme_pubr() +
    theme(axis.title.x = element_blank(),
          legend.title = element_blank()) +
    
    NULL
  
  nudge <- 0.05
  tip_length <- 0.01
  
  gg <- gg +
    geom_bracket(x = 1 - nudge,
                 y = b[1],
                 yend = b[1] + b[2],
                 tip.length = -tip_length,
                 label = "1. what KO does\nin Rest (confounder)",
                 text.nudge_x = -0.02,
                 text.size = 3,
                 text.hjust = 1,
                 color = "black") +
    geom_bracket(x = 1 - nudge,
                 y = b[1] + b[3],
                 yend = b[1] + b[2] + b[3] + b[4],
                 tip.length = -tip_length,
                 label = "2. wrong contrast\n(confounded by 1)",
                 text.nudge_x = -0.02,
                 text.size = 3,
                 text.hjust = 1,
                 text.vjust = 0.5,
                 color = "black") +
    geom_bracket(x = 2 + 1*nudge,
                 y = b[1]+b[2]+b[3],
                 yend = b[1]+b[2]+b[3]+b[4],
                 tip.length = tip_length,
                 label = "3. correct contrast\n(unconfounded by 1)",
                 text.size = 3,
                 text.hjust = 0,
                 text.vjust = 0.1,
                 color = "black") +
    
    NULL
  
  return(gg)
}
# gg_ixn_same
```

```{r}
#| label: twoway-same-story
#| echo: false
#| warning: false
#| message: false
#| fig.dim: full_dim_half
#| fig-cap: "It may take some work but these plots show the same four means and effects. The only difference is how we communicate the story to ourselves and to others. A) the order of the factors in the model is stimulation * genotype. B) the order of the factors in the model is genotype * stimulation."

gg_ixn_same <- same_story_build_gg()
plot_grid(gg_what_we_want, gg_ixn_same, ncol = 2, labels = "AUTO")

```

### Power for the interaction effect is less than that for simple effects

The interaction contrast is the difference of two simple contrasts and, consequently, the variance of the interaction contrast is [twice that of the simple contrasts](https://en.wikipedia.org/wiki/Variance#Sum_of_uncorrelated_variables_(Bienaymé_formula)){target="_blank"}. And, consequently, the SE of the interaction estimate is $\sim 1.4 \times$ larger than the precision of the two simple effects that form the contrast (1.4 is $sqrt{2}. The exact value will depend on differences in sample size among groups). The consequence of this is wider confidence intervals and larger *p*-values for the interaction contrast compared to a simple contrast of the same effect size.

### Planned comparisons vs. post-hoc tests

The contrasts computed above were planned based on questions motivating the experiment. The planned contrasts contain three of the four simple effects. The four simple effects are

```{r}
exp2j_m1_pairs <- contrast(exp2j_m1_emm,
                           method = "revpairwise",
                           simple = "each",
                           combine = TRUE,
                           adjust = "none") |>
  summary(infer = TRUE)
exp2j_m1_pairs |>
  kable(digits = c(1,1,1,2,3,1,2,2,1,6)) |>
  kable_styling()
```

There are six pairwise comparisons for this experiment. Two of these are not a simple effect:

1. KO/Active - WT/Rest
2. WT/Active - KO/Rest

These are the contrasts of the diagonal pairs in the cell-means table (Table \@ref(tab:twoway-exp2j-cellmeans)). In a factorial design, we generally are not interested in these diagonal contrasts. They could be reported in a supplement. Recognize that if you are adjusting *p*-values for multiple tests, and you do not care about these contrasts but have included them in the computation of the adjustment, then your adjusted *p*-values are conservative.

## Example 2: Estimation of the effect of background condition on an effect ("it depends") (Experiment 3e lesian area data)

```{r twoway-exp3e-import, message=FALSE, echo=FALSE}

data_from <- "XX sex chromosome complement promotes atherosclerosis in mice"
file_name <- "41467_2019_10462_MOESM6_ESM.xlsx"
file_path <- here(data_folder, data_from, file_name)

# fig 3e
exp3e_wide <- read_excel(file_path,
                  sheet = "Figure 3E",
                  range = "A3:K4",
                  col_names = FALSE) |>
  data.table() |>
  transpose(make.names = 1)

sex_levels <- colnames(exp3e_wide)
exp3e <- melt(exp3e_wide,
              measure.vars = sex_levels,
              variable.name = "sex",
              value.name = "lesian_area")

# convert lesian_area to mm^2 from µm^2
exp3e[, lesian_area := lesian_area/10^6]

# convert sex variable to factor
exp3e[, sex := factor(sex,
                        levels = sex_levels)]

# create chromosome column and convert to factor
chromosome_levels <- c("XX", "XY")
exp3e[, chromosome := rep(rep(chromosome_levels, each = 5), 2)]
exp3e[, chromosome := factor(chromosome,
                             levels = chromosome_levels)]

# researchers treatment levels
exp3e[, treatment := rep(c("FXX", "FXY", "MXX", "MXY"), each = 5)]

# two rows with missing response so delte these rows as there is 
# no useful information in them
exp3e <- na.omit(exp3e) # be careful with a global na.omit

# View(exp3e) # highlight and run to see data
```

### Understand the experimental design

**Research question**
1. What is the effect of the X chromosome complement on lipid-related disease markers?
2. What is the effect of sex (female or male gonad) on lipid-related disease markers?
3. How conditional is the sex effect on the chromosome complement?
4. How conditional is the effect of X chromosome complement on the level of sex?

**Response variable** $\texttt{lesian\_area}$ -- atherosclerotic lesian area in aortic sinus.

**Factor 1** -- $\texttt{sex}$ ("Female", "Male"). This is not the typical sex factor that is merely observed but is a manipulated factor. Sex is determined by the presence or absence of *SRY* on an autosome using the Four Core Genotype mouse model. *SRY* determines the gonad that develops (ovary or testis). "Female" does not have the autosome with *SRY*. "Male" has the autosome with *SRY*.

**Factor 2** -- $\texttt{chromosome}$ ("XX", "XY"). The sex chromosome complement is not observed but manipulated. In "XX", neither sex chromosome has *SRY* as the natural condition. In "XY", *SRY* has been removed from the Y chromosome.

**Design** -- $2 \times 2$, that is, two crossed factors each with two levels. This results in four groups, each with a unique combination of the levels from each factor. "Female XX" is the control. "Male XX" adds the autosomal *SRY* gene (and testes instead of an ovary). "Female XY" replaces the "X" complement with the engineered Y complement. "Male XY" has both the autosomal *SRY* and the engineered Y complement.

```{r two-way-factor-table, echo=FALSE}
factor_table <- data.table(
  sex = c("Female", "Male", "Female", "Male"),
  chromosome = c("XX", "XX", "XY", "XY"),
  treatment = c("FXX", "MXX", "FXY", "MXY"),
  "chromosome complement" = c("X", "X", "Y (sry-)", "Y (sry-)"),
  autosome = c("WT", "SRY+", "WT", "SRY+"),
  gonad = c("ovary", "testis", "ovary", "testis")
)

knitr::kable(factor_table) |>
  kable_styling()
```

The research question suggest the following planned contrasts

What is the effect of $\texttt{chromosome}$ on lipid-related disease markers?

1. (Female XX - Female XY) -- effect of XX in mice with female gonad. If hypothesis is true, this should be large, negative.
2. (Male XX - Male XY) -- effect of XX in mice with male gonad. If hypothesis is true, this should be large, negative.

What is the effect of $\texttt{sex}$ on lipid-related disease markers?

3. (Male XX - Female XX) -- effect of sex in XX mice.
4. (Male XY - Female XY) -- effect of sex in XY in mice.


How conditional are the effects?

5. (Male XX - Male XY) - (Female XX - Female XY) -- Interaction.

In this experiment, there is no treatment contrast or control contrast. Instead, all four simple contrasts are of equal interest.

### Fit the linear model

```{r two-way-lm, echo=TRUE}
exp3e_m1 <- lm(lesian_area ~ sex*chromosome, data = exp3e)
```

### Check the model

```{r, echo=TRUE, warning=FALSE}
ggcheck_the_model(exp3e_m1)
```

### Inference from the model

**The coefficient table**

```{r two-way-coef, echo=TRUE}
# step 2 - get the coefficient table
exp3e_m1_coef <- tidy(exp3e_m1, conf.int = TRUE)
```


```{r two-way-coef-show, echo=FALSE}
exp3e_m1_coef |>
  kable(digits = c(1,3,4,2,4,3,3)) |>
  kable_styling()
```

**The emmeans table**

```{r two-way-emm, echo=TRUE}
# step 3 - get the modeled means
exp3e_m1_emm <- emmeans(exp3e_m1, specs = c("sex", "chromosome"))

exp3e_m1_emm |>
  summary() |>
  kable(digits = c(1,1,3,4,1,3,3)) |>
  kable_styling()
```

**The contrasts table**

```{r two-way-planned, echo=TRUE}
# m1_emm # print in console to get row numbers
# set the mean as the row number from the emmeans table
fxx <- c(1,0,0,0)
mxx <- c(0,1,0,0)
fxy <- c(0,0,1,0)
mxy <- c(0,0,0,1)

# contrasts are the difference in the vectors created above
# the focal contrasts are in the understand the experiment section
# 1. (FXY - FXX) 
# 2. (MXY - MXX)
# 3. (MXX - FXX)
# 4. (MXY - FXY)
# 5. Interaction

exp3e_m1_planned <- contrast(exp3e_m1_emm,
                       method = list(
                         "FXY - FXX" = c(fxy - fxx),
                         "MXY - MXX" = c(mxy - mxx),
                         "MXX - FXX" = c(mxx - fxx),
                         "MXY - FXY" = c(mxy - fxy),
                         "Interaction" = c(mxy - mxx) -
                           c(fxy - fxx)
                           
                       ),
                       adjust = "none"
) |>
  summary(infer = TRUE)

# check
 # exp3e_m1_ixn <- contrast(exp3e_m1_emm,
 #                           interaction = c("revpairwise"),
 #                           by = NULL)

exp3e_m1_planned |>
  kable(digits = c(0,3,4,0,3,3,2,5)) |>
  kable_styling()

```

Explainer

1. The two simple effects and the interaction are computed separately. If we want to adjust for three comparisons, I would use the Holm method.
2. The magnitude of the estimated effect of XX in mice with male gonads is about 1/2 that in mice with female gonads. This difference is the magnitude of the interaction.
3. Don't infer "no effect" given the p-value of the interaction. The estimate of the interaction effect has the same magnitude as the estimated effect of XX in mice with male gonads and about 1/2 the magnitude as the estimated effect of XX in mice with female gonads. The interaction *p*-value suggests caution in our confidence of the sign of this effect.

### Plot the model

```{r plot_the_model, fig.dim=harrell_dim*small_scale}

exp3e_m1_plot <- ggplot_the_model(
  fit = exp3e_m1,
  fit_emm = exp3e_m1_emm,
  fit_pairs = exp3e_m1_planned,
  palette = pal_okabe_ito_blue,
  legend_position = "bottom",
  y_label = expression(paste("Lesian area (", mm^2, ")")),
  effect_label = expression(paste("Effect (", mm^2, ")")),
  contrast_rows = "all",
  rel_heights = c(0.5,1)
)
exp3e_m1_plot
```
### alternaPlot the model

```{r twoway-exp3e-altplot, echo=TRUE, eval=TRUE, fig.dim=response_dim*small_scale, fig.cap = "Dashed gray line is expected additive mean of KO/Active"}

exp3e_m1_pairs <- contrast(exp3e_m1_emm,
                           method = "revpairwise",
                           simple = "each",
                           combine = TRUE,
                           adjust = "none") |>
  summary(infer = TRUE)
b <- emm_b(exp3e_m1_emm)
dodge_width <- 0.4
gg <- ggplot_the_response(
  exp3e_m1,
  exp3e_m1_emm,
  exp3e_m1_pairs[1:4,],
  palette = pal_okabe_ito_blue,
  legend_position = "bottom",
  y_label = expression(paste("Lesian area (", mm^2, ")")),
  y_pos = c(0.75, 0.78, 0.72, 0.72)
) +
  geom_segment(x = 2 + dodge_width/2 - 0.05,
               y = b[1] + b[2] + b[3],
               xend = 2 + dodge_width/2 + 0.05,
               yend = b[1] + b[2] + b[3],
               linetype = "dashed",
               color = "gray") +
  geom_bracket(
    x = 2.25,
    y = b[1] + b[2] + b[3],
    yend = b[1] + b[2] + b[3] + b[4],
    label = paste0("ixn p = ",
                  fmt_p_value_rmd(exp3e_m1_planned[5,"p.value"])),
    text.size = 3,
    text.hjust = 0,
    color = "black")

gg
```

## Understanding the linear model with crossed factors 2

### Conditional and marginal means {#twoway-marginal-means}

```{r twoway-conditional-means, echo=FALSE, message=FALSE}
options(knitr.kable.NA = '')

fit <- copy(exp3e_m1)
factors <- c("sex", "chromosome")
fit_emm <- emmeans(fit, specs = factors) |>
  summary() |>
  data.table()

fit_emm_1 <- emmeans(fit, specs = factors[1]) |>
  summary() |>
  data.table()

fit_emm_2 <- emmeans(fit, specs = factors[2]) |>
  summary() |>
  data.table()

col_1 <- c(fit_emm[sex == "Female", emmean],
           fit_emm_1[sex == "Female", emmean])
col_2 <- c(fit_emm[sex == "Male", emmean],
           fit_emm_1[sex == "Male", emmean])

means_table <- data.frame("Female" = col_1,
                          "Male" = col_2,
                          "mean" = c(fit_emm_2[, emmean], NA))
row.names(means_table) <- c("XX", "XY","mean")

bgc1 <- pal_okabe_ito[1]
bgc2 <- pal_okabe_ito[2]

kable(means_table, 
      digits = 3,
      col.names = c("Female", "Male", "mean"),
      caption = "Conditional (white background) and marginal (color background) means from full factorial model fit to lesian area data") |>
  kable_styling(full_width = FALSE) |>
  # row_spec(row = 0,
  #          bold = F) |>
  column_spec(column = 1,
              bold = c(T, T, T)) |>
  column_spec(column = 4,
              background = c(bgc1, bgc1, "white")) |>
  column_spec(column = 3,
              background = c("white", "white", bgc2)) |>
  column_spec(column = 2, 
              background = c("white", "white", bgc2))


```

The conditional means from the fit model are shown in the upper left $2 \times 2$ block (white background) of Table \@ref(tab:twoway-conditional-means). These means are conditional on the level of $\texttt{sex}$ and $\texttt{chromosome}$. For the linear model with two crossed factor here (with no continuous covariates), these conditional means are equal to the sample means of the treatment. The values in the last row and column are the **marginal means**, which are the means of the associated row or column cells (these values are in the margins of the table). More generally, *marginal* refers to a statistic averaged across multiple levels of another variable. The marginal means of the $\texttt{chromosome}$ levels (orange background) are the means of the "XX" and "XY" rows. The marginal means of the $\texttt{sex}$ levels (blue background) are the means of the "Female" and "Male" columns. Note that the marginal means are simple averages across cell means and not weighted averages where the weights are the sample size used to compute the conditional (cell) means.

### Simple (conditional) effects

In a factorial experiment with crossed A and B factors, there is an effect of factor A (relative to the reference, or another level of factor A) for each of the *p* levels of factor B. And, there is an effect of factor B (relative to the reference, or another level of factor B) for each of the *m* levels of factor A. These effects of one factor at each of the levels of the other factor are called the **simple effects**. I prefer **conditional effects**, since the value of the effect is conditional on the level of the other factor.

For the mouse lesian area experiment, there is a chromosome effect at `sex = Female` and a different effect at `sex = Male`. Similarly, there is a sex effect at `chromosome = XX` and a different effect at `chromosome = XY`.

```{r twoway-conditional-effects, echo=FALSE}
exp3e_m1_emm <- emmeans(exp3e_m1, specs = c("sex", "chromosome"))
exp3e_m1_pairs <- contrast(exp3e_m1_emm,
                        method = "revpairwise",
                        adjust = "none",
                        simple = "each",
                        combine = TRUE) |>
  summary(infer = TRUE)
knitr::kable(exp3e_m1_pairs, 
             digits=c(1,1,1,3,3,1,3,3,3,5),
             caption = "Conditional (or \"simple\") effects of the factorial model.") |>
  kable_styling()
```

The first two rows are the conditional effects of $\texttt{sex}$ in each of the levels of $\texttt{chromosome}$. The last two rows are the conditional effects of $\texttt{chromosome}$ in each of the levels of $\texttt{sex}$.

To help understand conditional effects, I add these to the $m \times p$ table of treatment combination means (Table \@ref(tab:twoway-simple-effects)). The values in the right-side column (orange) are the conditional effects of $\texttt{sex}$ at each level of $\texttt{chromosome}$ These values are the difference of the means in the associated row. For example, the conditional effect of $\texttt{sex}$ when `chromosome = XY` is 0.124 (second value in orange column). The values in the bottom row (blue) are the conditional effects of $\texttt{chromosome}$ at each level of $\texttt{sex}$. These values are the difference of the means in the associated column. For example, the conditional effect of $\texttt{chromosome}$ when `sex = Female` is -0.29 (first value in blue row). Note that the first conditional effect for each factor has a corresponding row in the table of coefficients of the fit model because these are the effects for that factor at the reference level of the other factor.

```{r twoway-simple-effects, echo = FALSE}
options(knitr.kable.NA = '')
factors <- c("sex", "chromosome")

exp3e_m1_emm_dt <- exp3e_m1_emm |>
  summary() |>
  data.table()
exp3e_m1_pairs_dt <- data.table(exp3e_m1_pairs)

col_1 <- c(exp3e_m1_emm_dt[sex == "Female", emmean],
           exp3e_m1_pairs_dt[sex == "Female", estimate])
col_2 <- c(exp3e_m1_emm_dt[sex == "Male", emmean],
           exp3e_m1_pairs_dt[sex == "Male", estimate])
col_diffs <- c(exp3e_m1_pairs_dt[1:2, estimate], NA)

simple_table <- data.frame("Female" = col_1,
                          "Male" = col_2,
                          "simple" = col_diffs)
row.names(simple_table) <- c("XX", "XY","simple")



bgc1 <- pal_okabe_ito[1]
bgc2 <- pal_okabe_ito[2]

knitr::kable(simple_table, 
             digits = 3,
             col.names = c("Female", "Male", "simple"),
             caption = "Conditional (\"simple\") effects of sex (orange background) and chromosome (blue background) on lesian area. The conditional means of each combination of the factor levels are in the cells with the white background. The simple effect is the difference in the means of the associated row or column.") |>
  kable_styling(full_width = FALSE) |>
  # row_spec(row = 0,
  #          bold = F) |>
  column_spec(column = 1,
              bold = c(T, T, T)) |>
  column_spec(column = 4,
              background = c(bgc1, bgc1, "white")) |>
  column_spec(column = 3,
              background = c("white", "white", bgc2)) |>
  column_spec(column = 2, 
              background = c("white", "white", bgc2))
 


```

### Marginal effects {#twoway-marginal-effects}

The average of the conditional effects for a factor are the **marginal effects**, or the **main effects** in ANOVA terminology.

```{r twoway-marginal-effects, echo=FALSE, message=TRUE, warning=TRUE}
emmeans(exp3e_m1, specs = "sex") |>
  contrast(method = "revpairwise")
emmeans(exp3e_m1, specs = "chromosome") |>
  contrast(method = "revpairwise")
```
I'm showing the full output from the emmeans package output to highlight the warning that the inference "may be misleading" because of the interaction effect in the linear model. This is a healthy warning that I follow up on below.

In Table \@ref(tab:twoway-main), I add the marginal effects to the table of conditional effects from above (Table \@ref(tab:twoway-simple-effects))

```{r twoway-main, echo=FALSE, warning=FALSE, message=FALSE}
exp3e_m1_sex <- emmeans(exp3e_m1, specs = "sex") |>
  contrast(method = "revpairwise") |>
  summary(infer = TRUE) |>
  data.table()

exp3e_m1_chrom <- emmeans(exp3e_m1, specs = "chromosome") |>
  contrast(method = "revpairwise") |>
  summary(infer = TRUE) |>
  data.table()

marginal_table <- copy(simple_table)

marginal_table <- rbind(marginal_table, marginal =
                        c(NA, NA, exp3e_m1_sex[1, estimate]))
marginal_table <- cbind(marginal_table,
                        marginal = c(NA, NA, exp3e_m1_chrom[1, estimate], NA))

orange_color <- pal_okabe_ito[1]
blue_color <- pal_okabe_ito[2]
gray_color <- ggsci::pal_jco(alpha = 0.6)(9)[3]

knitr::kable(marginal_table, 
             digits = 3,
             col.names = c("Female", "Male", "simple", "marginal"),
             caption = "Marginal effects of sex (orange) and chromosome (blue) on lesian area. Simple effects are in grey cells. The conditional means of each combination of the factor levels are in the white cells.") |>
  kable_styling(full_width = FALSE) |>
  # row_spec(row = 0,
  #          bold = F) |>
  column_spec(column = 1,
              bold = c(T, T, T,T)) |>
  column_spec(column = 2, 
              background = c("white", "white", gray_color, "white")) |>
  column_spec(column = 3,
              background = c("white", "white", gray_color, "white")) |>
  column_spec(column = 4,
              background = c(gray_color, gray_color, "white", orange_color)) |>
  column_spec(column = 5,
              background = c("white", "white", blue_color, "white"))

```

### The additive model

Marginal effects can be useful for summarizing a general trend, but, like any average, might not be especially meaningful if there is large heterogeneity of the simple effects, which occurs when the interaction effect is large.

If an interaction effect is small, and we want to summarize the results as general trends ("sex does this, chromosome does that"), then the best practice strategy is to refit a new linear model that estimates the effects of the two factors as if the interaction were equal to zero.


$$
\begin{align}
\texttt{lesian\_area} &= \beta_0 \ + \\ 
&\quad \ \beta_1 \texttt{sex}_\texttt{Male} \ + \\ 
&\quad \ \beta_2 \texttt{chromosome}_\texttt{XY}
\end{align}
$$ {#eq-twoway-reduced}

Model @eq-twoway-reduced is a **reduced model** because one of the terms has been removed from the model. This particular reduced model is often referred to as the **additive model**, since it excludes the interaction term, which is non-additive effect (the indicator variable is the product of two "main" indicator variables). In R, this model is

```{r twoway-exp3e_m2}
exp3e_m2 <- lm(lesian_area ~ sex + chromosome, data = exp3e)
```

The model coefficients of the additive model are

```{r twoway-exp3e-m2-coef, echo=FALSE}
exp3e_m2_coef <- tidy(exp3e_m2, conf.int = TRUE)

knitr::kable(exp3e_m2_coef, 
             digits=c(1,3,3,2,3,3,3),
             caption = "Model coefficients of additive model.") |>
  kable_styling()

```
Explainer

1. $\texttt{sexMale}$ is the average of the two conditional effects of "Male" (one at `chromosome = "XX"` and one at `chromosome = "XY`).
2. $\texttt{chromosomeXY}$ is the average of the two conditional effects of "XY" (one at `sex = "Female"` and one at `sex = "Male`).
3. $\texttt{(Intercept)}$ is the expected value without the added $\texttt{sexMale}$ or  $\texttt{chromosomeXY}$ effects. This is a very abstract "average" of Female XX and is not the average value in the Female XX group.

The conditional effects of the reduced model are

```{r twoway-exp3e-m2-pairs, echo=FALSE}
exp3e_m2_emm <- emmeans(exp3e_m2, specs = c("sex", "chromosome"))
exp3e_m2_pairs <- contrast(exp3e_m2_emm,
                 method = "revpairwise",
                 adjust = "none",
                 simple = "each",
                 combine = TRUE) |>
  summary(infer = TRUE)


knitr::kable(exp3e_m2_pairs,
             digits = c(1,1,1,5,3,1,3,3,2,5),
             caption = "Conditional effects of additive model.") |>
  kable_styling()

```

Explainer

1. In an additive model, all conditional effects for one factor are the same for each level of the other factor. This makes sense. If the model fit is additive, the interaction effect is set to zero by the model and there cannot be differences in conditional effects among the contrasts at each of the levels of the other factor (otherwise, there would be an interaction). A more sensible way of thinking about this is, it doesn't make sense to compute or discuss conditional effects in an additive model. Instead, an additive model automatically estimates marginal effects.
2. Compare the table of marginal effects of the additive model to the table of marginal effects of the full model. The estimates for the chromosome effect are the same but the *t*-values and *p*-values differ because of different degrees of freedom (the full model estimates one more parameter, the interaction effect). The estimates for the sex effect are not the same between the two tables because of an imbalance of sample size. In the computation of the marginal effect of chromosome, the two simple effects both have sample size of 5 and 4. But in the computation of the marginal effect of sex, one simple effect has sample size of 5 and 5 while the other has a simple effect of 4 and 4.

### Reduce models for the right reason {#twoway-reduce}

Unless one factor truly has no effect, there will always be an interaction. As stated above, interactions are ubiquitous. If an interaction is small, it can make sense to drop the interaction term and re-fit an additive model to estimate marginal effects in order to present a simplified picture of what is going on, with the recognition that these estimates are smoothing over the heterogenity in conditional (simple) effects that truly exist.

Aided and abetted by statistics textbooks for biologists, there is a long history of researchers dropping an interaction effect because the interaction $p>0.05$. A good rule of thumb is, don't make model decisions based on *p*-values. It doesn't make any sense.

1. The $p$-value is an arbitrary dichotomization of a continuous variable. Would it make sense to behave differently if the interaction were $p=0.06$ vs. $p=0.04$, given that these two p-values are effectively identical?
2. A $p$-value is not evidence that an effect is zero, or "doesn't exist", or even that an effect is "trivially small". This is because $p$-values are a function of measurement error, sampling error, and sample size, in addition to effect size.

The interaction *p*-value for the lesion-area data is 0.078. Should we refit the additive model and report a simpler story of "a" chromosome effect and "a" sex effect? This reduced model isn't invalid and it is useful. Some considerations. 

1. there is certainly a real interaction between these two factors and this interaction reflects interesting biology.
2. For this example, I might report both -- the additive effect in the main paper (since the big chromosome complement effect is the story) and the conditional effects in the supplement, which might further work on investigating the underlying biology. Or maybe two sets of *p*-values on the plot? There are lots of unexplored ways to provide more "ways" of looking at the results.
3. Regardless, for this example, I would not avoid reporting the interaction effect and the conditional effects somewhere. The estimated interaction effect (0.14 mm$^2$) is moderately large relative to the four simple effects. It's much bigger than the marginal effect of sex (Table \@ref(tab:twoway-exp3e-m2-pairs)) and about 2/3 the size of the marginal effect of chromosome (Table \@ref(tab:twoway-exp3e-m2-pairs)).
4. A response plot of both models (Figure \@ref(fig:twoway-additive-plot)) can help understanding and the decision of which model to report.

```{r twoway-additive-plot, echo=FALSE, fig.width=full_width, fig.asp=0.5, fig.cap = "A. Conditional means and p-values of conditional effects. B. Marginal means and p-values of marginal effects."}
gg1 <- ggplot_the_response(exp3e_m1,
                    exp3e_m1_emm,
                    exp3e_m1_pairs,
                    palette = pal_okabe_ito_blue,
                    y_label = expression(paste("Lesian area (", mm^2, ")")),
                    y_pos = c(.76, .8, .72, .72)
                    )
gg2 <- ggplot_the_response(exp3e_m2,
                    exp3e_m2_emm,
                    exp3e_m2_pairs,
                    palette = pal_okabe_ito_blue,
                    y_label = expression(paste("Lesian area (", mm^2, ")")),
                    y_pos = c(.76, .8, .72, .72)
                    )
plot_grid(gg1, gg2, ncol=2, labels = "AUTO")
```

### The marginal means of an additive linear model with two factors can be weird

To better understand the marginal effects computed from the additive model, let's compare the emmeans table of the factorial and additive models.

```{r twoway-exp3e_m1_emm, echo=FALSE}
exp3e_m1_emm |>
  summary() |>
  kable(digits = c(3), caption = "Conditional means of the lesian area data computed from the factorial model.") |>
  kable_styling()
```

```{r twoway-exp3e_m2_emm, echo=FALSE}
exp3e_m2_emm |>
  summary() |>
  kable(digits = c(3), caption = "Marginal means of the lesian area data computed from the additive model.") |>
  kable_styling()
```

Explainer

1. The means in the conditional means table (Table \@ref(tab:twoway-exp3e_m1_emm)) are equal to the sample means. These are conditional on $\texttt{sex}$ and $\texttt{chromosome}$.
2. The means in the marginal means table (Table \@ref(tab:twoway-exp3e_m2_emm)) are not equal to the sample means. These are modeled means of the four groups from a model in which there is no interaction effect, so all conditional effects for one factor are the same for each level of the other factor. If you take the difference of Male - Female for both the XX and the XY groups, these will be the same. All data has some measured interaction (even if there is no true interaction. But remember, interaction is ubiquitous in biology). The larger this interaction, the more weird the marginal means because these are less compatible with the data.

```{r twoway-explore, echo=FALSE, eval=FALSE}
exp3e[, .(N = .N), by = treatment]
exp3e_m1_emm
exp3e_m2_coef
# (Intercept) is not the mean of Female XX. What is it?
# sexMale is effect of Male adjusted for chromosome. Adjusted means averaging over the chromosome effects. This is the simple average over the effects, not weighted by n.
# chromosomeXY is effect of XY adjusted for sex. Adjusted means averaging over the sex effects. This is the simple average over the effects, not weighted by n.

```

## Example 3: Estimation of synergy ("More than the sum of the parts") (Experiment 1c JA data)

To explain what synergy is and why it is estimated by the interaction effect, this example uses data from an experiment measuring the effect of two defense signals on the defense response in Maize plants. In response to herbivory from insects, maize, and other plants, release multiple, chemical signals into the air (chemicals that evaporate into the air are known as volatile compounds). These chemicals signal the plant, and neighboring plants, to secrete anti-herbivory hormones, including abcisic acid and jasmonic acid. The researchers investigated the effects of two volatile compounds, (Z)‐3‐hexenyl acetate (HAC) and Indole, on the defense response both each without the other and in combination.

The example data come from Figure 1c, which is the effect of HAC and Indole on tissue concentrations of the hormone jasmonic acid (JA). The design is fully crossed with two factors, each with two levels: $\texttt{hac}$, with levels "HAC-" and "HAC+", and $\texttt{indole}$, with levels ("Indole-" and "Indole+").

```{r factorial-2way-table, echo = FALSE, message=FALSE, warning=FALSE}
df <- data.frame("HAC-" = c("Control", "Indole"),
                 "HAC+" = c("HAC", "HAC+Indole"))
row.names(df) <- c("Indole-", "Indole+")
knitr::kable(df, col.names = c("HAC-", "HAC+"))
```

```{r twoway-ja-import, echo=FALSE, warning=FALSE, message=FALSE}

data_from <- "Integration of two herbivore-induced plant volatiles results in synergistic effects on plant defense and resistance"
file_name <- "Data for Dryad.xlsx"
file_path <- here(data_folder, data_from, file_name)

exp1 <- read_excel(file_path,
                     sheet = "Fig. 1",
                     range = "A3:K23", # 1 blank column
                     col_names = TRUE) |>
  data.table() |>
  clean_names()

setnames(exp1, old = "treat", new = "treatment")

exp1[treatment == "Control", c("hac", "indole") := list("HAC-", "Indole-")]
exp1[treatment == "HAC", c("hac", "indole") := list("HAC+", "Indole-")]
exp1[treatment == "Indole", c("hac", "indole") := list("HAC-", "Indole+")]
exp1[treatment == "HAC+Indole", c("hac", "indole") := list("HAC+", "Indole+")]

treatment_levels <- c("Control", "HAC", "Indole", "HAC+Indole")
exp1[, treatment := factor(treatment,
                           levels = treatment_levels)]
exp1[, hac := factor(hac)] # levels in correct order
exp1[, indole := factor(indole)] # levels in correct order
# View(exp1)
```

### Examine the data

```{r}
qplot(x = treatment, y = ja, data = exp1)
```

Too few points for box plot. control variance is small. No obvious implausible points. fit with lm but recognize small n warning for any inference.

### Fit the model
```{r  twoway-ja-m1}
exp1c_m1 <- lm(ja ~ hac * indole, data = exp1)
```

### Model check

```{r twoway-ja-check}
ggcheck_the_model(exp1c_m1)
```

The distribution looks like a sample from a Normal. The variance looks like it increases with the mean. This suggest gls modeling heterogeneity.

### Inference from the model

```{r twoway-ja-coef}
exp1c_m1_coef <- tidy(exp1c_m1, conf.int = TRUE)

exp1c_m1_coef |>
  kable(digits = 3) |>
  kable_styling()
```


```{r twoway-ja-emm}
exp1c_m1_emm <- emmeans(exp1c_m1, specs = c("hac", "indole"))

exp1c_m1_emm |>
  kable(digits = c(1,1,1,2,1,1,1)) |>
  kable_styling()
```

```{r twoway-ja-planned}
# exp1c_m1_emm # print in console to get row numbers
# set the mean as the row number from the emmeans table
ref <- c(1,0,0,0)
hac <- c(0,1,0,0)
indole <- c(0,0,1,0)
hac_indole <- c(0,0,0,1)

# contrasts are the difference in the vectors created above
# these planned contrasts are described above
# 1. (hac+/indole- - hac-/indole-) # add hac
# 2. (hac-/indole+ -  hac-/indole-) # add indole
# 3. (hac+/indole+ - hac-/indole+) - (hac+/indole- - hac-/indole-) # Interaction

exp1c_m1_planned <- contrast(
  exp1c_m1_emm,
  method = list(
    "hac+" = c(hac - ref),
    "indole+" = c(indole - ref),
    "HAC/Indole Ixn" = c(hac_indole - indole) -
      (hac - ref)
  ),
  adjust = "none"
) |>
  summary(infer = TRUE)

exp1c_m1_planned |>
  kable(digits = c(1,2,3,1,2,2,2,5)) |>
  kable_styling()
```

### Plot the model

```{r twoway-ja-plot, echo=FALSE, , fig.dim=harrell_dim*small_scale}

m1 <- lm(ja ~ treatment, data = exp1)
m1_emm <- emmeans(m1, specs = "treatment")
ggplot_the_model(
  fit = exp1c_m1,
  fit_emm = exp1c_m1_emm,
  fit_pairs = exp1c_m1_planned,
  dodge_width = 1,
  palette = pal_okabe_ito_4,
  legend_position = "bottom",
  y_label = "JA\n(ng per g FW)",
  #y_label = expression(paste("Abcisic acid\n(ng", g^-1, "FW)")),
  effect_label = "Difference in JA",
  contrast_rows = "all",
  rel_heights = c(0.4,1)
)
```

### Alternative plot

```{r twoway-ja-alternaplot, echo=FALSE, fig.dim=response_dim*small_scale, fig.cap = "An alternative plot for showing the estimate of synergy. Gray, dashed line is the expected mean of the HAC + Indole group if the interaction is zero."}

b <- emm_b(exp1c_m1_emm)
exp1c_m1_pairs <- contrast(exp1c_m1_emm,
                           method = "revpairwise",
                           simple = "each",
                           combine = TRUE,
                           adjust = "none") |>
  summary(infer = TRUE)

ggplot_the_response(
  fit = exp1c_m1,
  fit_emm = exp1c_m1_emm,
  fit_pairs = exp1c_m1_pairs,
  palette = pal_okabe_ito_blue,
  legend_position = "bottom",
  y_label = "JA\n(ng per g FW)",
  contrast_rows = c(3,1),
  y_pos = c(130, 138)
) +
  
  # add additive mean
  geom_segment(x = 2.1,
               y = sum(b[1:3]),
               xend = 2.4,
               yend = sum(b[1:3]),
               linetype = "dashed",
               color = "gray") +
  
  # bracket
  geom_bracket(
    x = 2.25,
    y = b[1] + b[2] + b[3],
    yend = b[1] + b[2] + b[3] + b[4],
    label = paste0("synergy\n(interaction)\np = ",
                   fmt_p_value_rmd(exp1c_m1_planned[3,"p.value"])),
    text.size = 3,
    text.hjust = 0,
    color = "black") +

  NULL


```


```{r sad3FUN, echo=FALSE}
sad3 <- function(m1, m1_emm){
  b <- unlist(tidy(m1, conf.int = TRUE)[, "estimate"])
  m1_emm <- summary(m1_emm)
  mu <- m1_emm[, "emmean"]
  
  X <- model.matrix(m1)
  y_col <- insight::find_response(m1)
  y <- model.frame(m1)[, y_col]
  b <- (solve(t(X)%*%X)%*%t(X)%*%y)[,1]

  b2 <- c(mu[1],
          mu[2] - mu[1],
          mu[3] - mu[1],
          mu[4])
  b2[4] <- b2[4] - (b2[1]+b2[2]+b2[3])
  
  gg <- ggplot(data = m1_emm,
               aes(x = names(m1_emm)[1],
                   y = emmean,
                   color = names(m1_emm)[2])) +
    
    geom_hline(yintercept = mu[1],
               linetype = "dashed",
               color = "black",
               alpha = 0.5) +
    geom_hline(yintercept = mu[2],
               linetype = "dashed",
               color = "black",
               alpha = 0.5) +
    annotate(geom = "text",
             label = paste(round(b,2), collapse=","),
             x = 1.5,
             y = (mu[1] + mu[2])/2) + # middle, fails
    annotate(geom = "text",
             label = paste(round(mu,2), collapse=","),
             x = 1.5,
             y = mu[1] + 0.75*b2[2]) + # top, works
    annotate(geom = "text",
             label = paste(round(b2,2), collapse=","),
             x = 1.5,
             y = mu[1] + 0.25*b2[2]) + # bottom, works
    
    
  NULL


  return(gg)
}
```

```{r TESTsad, eval=FALSE, echo=FALSE}
gg <- sad3(exp2j_m1, exp2j_m1_emm)
gg
gg <- sad3(exp1c_m1, exp1c_m1_emm)
gg

```

## Understanding the linear model with crossed factors 3

### Thinking about the coefficients of the linear model

$$
\begin{align}
\texttt{ja} &= \beta_0  \ + \\
&\quad \ \beta_1 (\texttt{hac}_\texttt{HAC+}) \ + \\  
&\quad \ \beta_2 (\texttt{indole}_\texttt{Indole+}) \ + \\  
&\quad \ \beta_3 (\texttt{hac}_\texttt{HAC+}:\texttt{indole}_\texttt{Indole+})
\end{align}
$$ {#eq-factorial-full}

The linear model makes it easy to understand synergy in the $2 \times 2$ design. If we start with the mean of the reference (the group without the added HAC or Indole), then $\beta_1$ is the extra bit due to adding HAC, $\beta_2$ is the extra bit due to adding Indole, and $\beta_3$ is the extra bit due to synergy between HAC and Indole. A positive $\beta_3$ means the combined treatment effect is more than the sum of the parts.

```{r factorial-coef, echo=FALSE}
exp1c_m1_coef |>
  kable(digits=c(2,2,1,3, 2, 2),
        caption="Coefficient table of the factorial model") |>
  kable_styling()
```

Again, the interaction is a **non-additive effect**. Adding HAC alone increases JA concentration by 15.6 ng per g FW. Adding Indole alone increases JA concentration by 13.1 ng per g FW. If these effects were purely additive, then adding both HAC and Indole to the Control mean should result in a mean of 43.9 + 15.6 + 13.1 = 72.6 ng per g FW in the HAC+Indole group. The modeled mean is 102.4 ng per g FW. The difference (observed - additive) is 102.4 - 72.6 = 29.8 ng per g FW. This is the estimated interaction effect in the coefficient table.

```{r twoway-synergy-build, echo=FALSE, eval=TRUE}

b <- emm_b(exp1c_m1_emm)
b0 <- b[1]
b1 <- b[2]
b2 <- b[3]
b3 <- b[4]

m1_emm <- exp1c_m1_emm |>
  summary() |>
  data.table()

treatment_levels <- c("Control", "HAC", "Indole", "HAC+Indole")
m1_emm[, treatment := factor(treatment_levels, treatment_levels)]

p1 <- data.table(
  xpos = 1:4,
  y = b[1],
  treatment = treatment_levels[1]
)
p2 <- data.table(
  xpos = 1:4,
  y = c(0, b[2], 0, b[2]),
  treatment = treatment_levels[2]
)
p3 <- data.table(
  xpos = 1:4,
  y = c(0, 0, b[3], b[3]),
  treatment = treatment_levels[3]
)
p4 <- data.table(
  xpos = 1:4,
  y = c(0, 0, 0, b[4]),
  treatment = treatment_levels[4]
)

gg_table <- rbind(p1, p2, p3, p4)
gg_table[, treatment := fct_rev(factor(treatment,
                               levels = treatment_levels))]

gg_synergy <- ggplot(data = gg_table,
                 aes(x = factor(xpos),
                     y = y,
                     fill = treatment)) +
  
  # plot means
  geom_col(position = "stack") +
  
#  coord_cartesian(ylim = c(0, 60)) +

  annotate(geom = "text",
           label = c("additive expectation"),
           x = c(3.1),
           y = c(b0+b1+b2),
           size = 4,
           hjust = 1) +
  geom_segment(x = 3.2,
               y = b0+b1+b2,
               xend = 3.5,
               yend = b0+b1+b2,
               arrow=arrow(length = unit(0.05, "npc"),
                           ends = "last",
                           type = "open"),
               color="black") +
  
  # add "add this"
  annotate(geom = "text",
           label = c("start with\nControl"),
           x = 1:4,
           y = rep(b0/2, 4),
           size = 3,
           hjust = 0.5) +
  annotate(geom = "text",
           label = c("add\nHAC"),
           x = c(2,4),
           y = rep(b0 + b1/2, 2),
           size = 3,
           hjust = 0.5) +
  annotate(geom = "text",
           label = c("add\nIndole"),
           x = c(3,4),
           y = c(b0 + b2/2,
                 b0 + b1 + b2/2),
           size = 3,
           hjust = 0.5) +
  annotate(geom = "text",
           label = c("synergy\n(interaction)"),
           x = 4,
           y = b0 + b1 + b2 + b3/2,
           size = 3,
           hjust = 0.5) +
  
  scale_fill_manual(values = rev(pal_okabe_ito_blue[1:4])) +
  
  ylab("JA (ng per g FW)") +
  theme_minimal_hgrid() +
  
  theme(axis.title.x=element_blank()) +
  scale_y_continuous(
    # don't expand y scale at the lower end
    expand = expansion(mult = c(0, 0.05)))  +
  scale_x_discrete(label = treatment_levels) +

  NULL
# 
# image_path <- here("images", "twoway-synergy.png")
# ggsave(image_path,
#        width = std_width,
#        height = std_width*std_ar,
#        units = "in")
# 
# gg_synergy
```

```{r twoway-synergy, echo=FALSE, fig.dim=std_dim, fig.cap="Synergy is the bit needed to get to the HAC + Indole mean after adding the HAC effect and the Indole effect to the Control mean"}
# image_path <- here("images", "twoway-synergy.png")
# knitr::include_graphics(image_path)
gg_synergy
```

## Issues in inference
### For pairwise contrasts, it doesn't matter if you fit a factorial or a flattened linear model

Compare the pairwise comparisons of the Experiment 2j glucose uptake data using a factorial linear model and a flattened linear model.

Factorial:

```{r two-exp2j-factorial-pairwise}
m1 <- lm(glucose_uptake ~ stimulation * genotype, data = exp2j)

m1_emm <- emmeans(m1, specs = c("stimulation", "genotype"))

m1_pairs <- contrast(m1_emm,
                     method = "revpairwise",
                     adjust = "tukey") |>
  summary(infer = TRUE)

m1_pairs |>
  kable(digits = c(3)) |>
  kable_styling()
  
```

Flattened:

```{r two-exp2j-flattened-pairwise}
m2 <- lm(glucose_uptake ~ treatment, data = exp2j)

m2_emm <- emmeans(m2, specs = c("treatment"))

m2_pairs <- contrast(m2_emm,
                     method = "revpairwise",
                     adjust = "tukey") |>
  summary(infer = TRUE)

m2_pairs |>
  kable(digits = c(3)) |>
  kable_styling()
  
```

### For interaction contrasts, it doesn't matter if you fit a factorial or a flattened linear model

Factorial model:

```{r}
# using m1 from above
m1_ixn <- contrast(m1_emm,
                     interaction = "revpairwise") |>
  summary(infer = TRUE)

m1_ixn |>
  kable(digits = c(3)) |>
  kable_styling()
```

Flattened model:

```{r}
# need to compute the interaction as a contrast
# using m2 from the previous chunk

# m2_emm # print in console to get row numbers
# set the mean as the row number from the emmeans table
wt_rest <- c(1,0,0,0)
wt_active <- c(0,1,0,0)
ko_rest <- c(0,0,1,0)
ko_active <- c(0,0,0,1)

# contrasts are the difference in the vectors created above
# 4. (KO/Active - WT/Active) - (KO/Rest - WT/Rest) -- interaction 

m2_ixn <- contrast(m2_emm,
                   method = list(
                     "KO:Active Ixn" = c(ko_active - wt_active) -
                       (ko_rest - wt_rest)
                   )) |>
  summary(infer = TRUE)

m2_ixn |>
  kable(digits = c(3)) |>
  kable_styling()
```


### Adjusting *p*-values for multiple tests {#twoway-multiple-tests}

Inflated Type I error in pairwise tests is a concern among some statisticians and many reviewers, readers, and colleagues. It is not the frequency of individual tests that is inflated in a batch of pairwise tests but the "family-wise" error rate -- given either the six pairwise tests or the four simple-effect tests or in a $2 \times 2$ design, what is the frequency of at least one Type I error within this family of tests? For all six pairwise tests of the $2 \times 2$ design, the default adjustment is the Tukey HSD (Honestly Significant Difference) method. But if we limit the comparisons to the four simple effects, we need some other adjustment, if we want to adjust. Here are six different adjustment methods (including no adjustment) for the simple effects.

```{r twoway-exp2j-p-adjust, echo = FALSE}
p_methods <- c("Tukey", "Bonferroni", "Sidak",
               "Holm", "MvT", "FDR", "None")

p_mat <- matrix(as.numeric(NA), nrow = 4, ncol = length(p_methods))
colnames(p_mat) <- p_methods

m1_pairs <- contrast(exp2j_m1_emm,
         method = "revpairwise",
         simple = "each",
         combine = TRUE,
         adjust = "bonferroni") |>
  summary()
p_mat[, "Bonferroni"] <- m1_pairs[, "p.value"]


m1_pairs <- contrast(exp2j_m1_emm,
                     method = "revpairwise",
                     adjust = "tukey") |> # tukey is the default so this argument isn't needed in the arguments
  summary() |>
  dplyr::slice(c(1,6,2,5))
p_mat[, "Tukey"] <- m1_pairs[, "p.value"]

m1_pairs <- contrast(exp2j_m1_emm,
         method = "revpairwise",
         simple = "each",
         combine = TRUE,
         adjust = "sidak") |>
  summary()
p_mat[, "Sidak"] <- m1_pairs[, "p.value"]

m1_pairs <- contrast(exp2j_m1_emm,
         method = "revpairwise",
         simple = "each",
         combine = TRUE,
         adjust = "holm"
) |>
  summary()
p_mat[, "Holm"] <- m1_pairs[, "p.value"]

m1_pairs <- contrast(exp2j_m1_emm,
         method = "revpairwise",
         simple = "each",
         combine = TRUE,
         adjust = "mvt") |>
  summary()
p_mat[, "MvT"] <- m1_pairs[, "p.value"]

m1_pairs <- contrast(exp2j_m1_emm,
         method = "revpairwise",
         simple = "each",
         combine = TRUE,
         adjust = "fdr") |>
  summary()
p_mat[, "FDR"] <- m1_pairs[, "p.value"]

m1_pairs <- contrast(exp2j_m1_emm,
         method = "revpairwise",
         simple = "each",
         combine = TRUE,
         adjust = "none") |>
  summary()
p_mat[, "None"] <- m1_pairs[, "p.value"]

m1_pairs <- data.table(m1_pairs)
m1_pairs[1:2, contrast := paste(genotype, contrast, sep = ": ")]
m1_pairs[3:4, contrast := paste(stimulation, contrast, sep = ": ")]
y_cols <- c("contrast", "estimate")
m1_pairs <- cbind(m1_pairs[, .SD, .SDcols = y_cols], data.table(p_mat))
m1_pairs |>
  kable(digits = c(1,2,3,3,3,3,3,3,3),
        caption = "P-values from seven different methods of adjustment. The Tukey-all p-value is from all six pairwise comparisons. All other p-values are from the four simple effects.") |>
  kable_styling() |>
  row_spec(4, background = pal_okabe_ito[1])
```

Table \@ref(tab:twoway-exp2j-p-adjust) shows *p*-values adjusted using seven different methods (including no adjustment) for the Experiment 2j glucose uptake data.

The Tukey correction is applied to all six pairwise tests in the code above.

1. **Tukey** -- The Tukey HSD adjustment corrects for the expected correlation among the tests.

The other corrections are applied to only the four simple effects.

2. **Bonferroni** -- The Bonferroni adjustment assumes independence among the tests. This isn't true for posthoc tests because every contrast includes a group that is in other tests (that is, the different contrasts have common data). The consequence of the correlation among the tests is that the Bonferroni adjustment is too conservative (the actual rate of Type I error will be smaller than the nominal rate). Even with independent test, the Bonferroni method is less powerful than the methods below.
3. **Sidak** -- The Sidak correction has increased power relative to Bonferroni but does not explicitly account for correlated tests. It's type I error rate is too conservative.
4. **Holm** -- The Holm variant of the Bonferroni adjustment has increased power relative to the Bonferroni but does not explicitly account for correlated tests. It's type I error rate is too conservative.
5. **Mvt** -- The multivariate *t* adjustment corrects for the empirically measured correlation.
6. **FDR** -- The FDR adjustment does not attempt to correct for Type I error but for the False Discovery Rate. The difference between these concepts is important.

Further thoughts on multiple adjustment, focussing on the highlighted row in the table.

1. The most transparent best practice is to report all, unadjusted *p*-values. Reporting all unadjusted *p*-values allows a reader to compute whatever adjustment they deem appropriate for the question they are addressing. Reporting all *p*-values could overwhelm the principal message of a figure. Instead, report focal (planned comparison) *p*-values in the figure and a table of all *p*-values in the supplement. There should be a table of these for every experiment in the supplement. This point raises the question of what "all" means. In some designs, "all" could mean all treatment vs. control comparisons. In others, "all" could mean all pairwise comparisons. In others, "all" could mean all pairwise comparisons and all interactions.
2. In a Fisherian world-view of *p*-values, there just isn't any real difference in inference between $p = 0.02$ (no adjustment) and $p = 0.086$ (Tukey adjustment from all pairwise comparisons). Fisher expected decisions based on multiple replications of the experiment, all (or nearly) with $p < 0.05$. From a Fisherian-world-view, then, we have bigger how-to-do-science issues than multiple testing if we are making decisions entirely on $p = 0.02$ versus $p = 0.086$.
3. From a Neyman-Pearson testing world-view, what is important is the family of tests. Using all six pairwise comparisons or all four simple effects as the family because this is how the software assigned it is rather mindless statistics.

## Two-way ANOVA

Both wet-bench and ecology/evolution experimental biologists do ANOVA. Many textbooks, advisors, and colleagues tell researchers to report "tests after ANOVA" -- what I call pairwise contrasts -- but in modern computing, pairwise contrasts and ANOVA tables are both computed from the same underlying regression model. The ANOVA is not necessary for any inference, a point I return to below.

Let's use the glucose uptake experiment (Example 1) to explore the ANOVA table.

### How to read a two-way ANOVA table

```{r twoway-anova-explainer, echo = FALSE, message=FALSE, warning=FALSE}

exp2j[, fake_id := paste("mouse", .I)]
exp2j_aov4 <- aov_4(glucose_uptake ~ stimulation * genotype + (1|fake_id),
                 data = exp2j)
afex_options(round_ps = 4)
exp2j_aov4_nice <- nice(exp2j_aov4, 
                        MSE = FALSE,
                        sig_symbols = rep("", 4))[,-4]  
exp2j_aov4_nice |>
  kable(caption = "ANOVA table of glucose uptake experiment (Example 1).") |>
  kable_styling()

# type3 <- list(stimulation = contr.sum, genotype = contr.sum)
# m1_type3 <- lm(glucose_uptake ~ stimulation * genotype,
#                data = exp2j,
#                contrasts = type3)
# m1_aov <- Anova(m1_type3, type="3")[2:5,]
# m1_aov_dt <- data.table(term = row.names(m1_aov),
#                         m1_aov)
# m1_aov_dt[, MSE := get("Sum Sq")/Df]
# y_cols <- c("term", "Sum Sq", "Df", "MSE", "F value", "Pr(>F)")
# m1_aov_dt <- m1_aov_dt[, .SD, .SDcols = y_cols]
# new_cols <- c("", "Sum Sq", "df", "MSE", "F value", "Pr(>F)")
# setnames(m1_aov_dt, old = names(m1_aov_dt), new = new_cols)
# 
# m1_aov_dt |>
#   kable(digits = c(1,2,1,2,2,5)) |>
#   kable_styling()


```

Explainer

1. This ANOVA table is computed using Type III sum of squares and should match the output from most statistics software including Graphpad Prism. The relevance of this is addressed below.
2. In general, an ANOVA table has a row for each term in the underlying linear model. ANOVA is a method for decomposing the total variance into batches and each of these terms is a batch. For the linear model with two crossed factors, there is a term for each factor and a term for the interaction. $\texttt{stimulation}$ and $\texttt{genotype}$ are the **main** (or 1st order) effects. $\texttt{stimulation:genotype}$ is the interaction (or 2nd order) effect. These terms are the row names of the table.
3. Some ANOVA functions in R also include a row for the variance of the residuals from the fit model. This row can be useful for learning what the values in ANOVA table are but only one statistic from the row (the residual df) is especially useful for reporting. In Table \@ref(tab:twoway-anova-explainer), this residual df is included in the statistics for each term.
4. Many ANOVA tables contain additional SS (sum of squares) and MSE (mean square error) columns. The MSE is the variance of the term and used to compute the *F* statistic. The SS is used to compute the MSE. Since these columns are used for computation but not reporting, Table \@ref(tab:twoway-anova-explainer) excludes these.
5. **df** (Degree of freedom) -- If the term is a factor, the df will equal the number of levels ($k$) for the factor minus 1. Think of it this way: the contribution of the variance due to a factor is a function of the variability of the $k$ level means around the grand mean. How many degrees of independent variation do these level means have, given that we know the grand mean? The answer is $k-1$ -- once the values of $k-1$ level means are written down, the $k$th level mean has no freedom to vary; its value has to be $k\bar{\bar{Y}} - \sum_i^{k-1}{Y_i}$. For an interaction term, the df is the product of the df of each of the factors in the interaction.
6. **F** (*F*-value or *F*-ratio) -- This is the test statistic. It is the ratio of the MSE for the term divided by the MSE of the residual (this is strictly true for only "Fixed effects" ANOVA, which we have here).
7. **p.value** -- the *p*-value for the test statistic. *F* is compared to an *F*-distribution, which is a distribution of *F*-values under the null.

### What do the main effects in an ANOVA table mean?

It is very common in the literature to see researchers report the rows of an ANOVA table by stating something like "We found an effect of stimulation on glucose uptake ($F_{1,25} = 26.9$, $p < 0.0001$)". Thinking of a main effect term in an ANOVA table as "an effect" can be misleading. What does "an effect" mean? Afterall, there are *two* effects of $\texttt{stimulation}$ in this experiment, one in the wildtype mice and one in the TLR9-/- mice. 

Main effects in ANOVA tables are about average effects. A main effect in a two-way ANOVA table is an "overall" marginal effect. Recall that a marginal effect of the level of Factor A is the average of the conditional effects at each level of B (Section \@ref(twoway-marginal-effects)). For a $2 \times 2$ table, there is only one marginal effect for each factor and, as a consquence, the *p* value for the main effect term of $\texttt{stimulation}$ in the ANOVA table (Table \@ref(tab:twoway-anova-table)) is equal to the *p*-value of the marginal effect of $\texttt{stimulation}$ in the contrast table (Table \@ref(tab:twoway-marginal-table)). The "main term" effect of stimulation is illustrated in Figure \@ref(twoway-main-1).

```{r twoway-anova-table, echo=FALSE}
anova(exp2j_aov4)[, -c(3,5)] |>
  kable(caption = "Reprinting the ANOVA table of the glucose uptake experiment (Example 1) to show more decimal places of the p-value.",
        digits = c(1,1,2,7)) |>
  kable_styling()
```

```{r twoway-marginal-table, echo = FALSE, message=FALSE}
exp2j_aov4_emm_stim <- emmeans(exp2j_aov4, specs = "stimulation")
contrast(exp2j_aov4_emm_stim,
         method = "revpairwise") |>
  summary(infer = TRUE) |>
  kable(digits = c(1,2,3,1,2,2,3,7),
        format.args = list(scientific = FALSE),
        caption = "Marginal effect of stimulation on glucose uptake.") |>
  kable_styling()

```

Again, main effects in ANOVA tables are about average effects. Is the average effect what we want to report? The answer is, it depends. It does *not* depend on the *p*-value of the interaction (the answer in many textbooks and websites) although the *p*-value is, perhaps, not irrelevant. Rather, it depends on the research question motivating the experiment. The research question in Experiment 2j specifically predicted a different treatment (KO/Active - KO/Rest) and control effect (WT/Active - WT/Rest). The average of these two effects isn't of interest. Any inference about the average effect of stimulation (the *p*-value from the ANOVA table or the marginal effect size or CIs) doesn't answer any question motivating the experiment. A more general discussion of when we might be interested in the main effect term of an ANOVA table (or better, marginal effects) was in section xxx and below in section xxx.

```{r twoway-anova-explainer-build, echo=FALSE, eval=TRUE, warning=FALSE, message=FALSE}

anova_build_gg <- function(){
  type3 <- list(stimulation = contr.sum, genotype = contr.sum)
  exp2j_aov <- lm(glucose_uptake ~ stimulation * genotype,
                  data = exp2j,
                  contrasts = type3)
  exp2j_aov_emm <- emmeans(exp2j_aov, specs = c("stimulation", "genotype")) |>
    summary() |>
    data.table()
  exp2j_aov_stim <- emmeans(exp2j_aov, specs = "stimulation") |>
    summary() |>
    data.table()
  
  exp2j_aov_geno <- emmeans(exp2j_aov, specs = "genotype") |>
    summary() |>
    data.table()

  exp2j_aov_stim[, genotype := c(1.5, 1.5)]
 
  b <- coef(exp2j_aov) # ugg fails when bookdowning
  b <- c(8.2874498, -1.1473230, 0.1867615, -0.5768006 )
  
  dodge_width <- 0.0
  pd <- position_dodge(dodge_width)
  
  nudge <- 0.05
  bracket_table <- data.table(
    x = c(1 + nudge,
          2 - nudge,
          2 - nudge),
    y = c(b[1],
          b[1],
          b[1] + b[2] + b[3]),
    xend = c(1 + nudge,
             2 - nudge,
             2 - nudge),
    yend = c(b[1] + b[2],
             b[1] + b[3],
             b[1] + b[2] + b[3] + b[4])
  )
  
  dodge_width <- 0.0
  pd <- position_dodge(dodge_width)
  gg <- ggplot(data = exp2j_aov_emm,
                         aes(x = genotype,
                             y = emmean,
                             color = stimulation)) +
    
    # add individual points in the background
    geom_jitter(data = exp2j,
                aes(y = glucose_uptake,
                    color = stimulation),
                alpha = .3,
                width = 0.1) +
    
    # grand mean line
    geom_segment(x = 0.75,
                 y = b[1],
                 xend = 2.25,
                 yend = b[1],
                 linetype = "dashed",
                 color = "gray") +
    # annotate(geom = "text",
    #          label = "grand mean",
    #          x = .5,
    #          y = b[1],
    #          hjust = 0) +
    
    # conditional means
    geom_point(size = 3,
               position = pd) +
    
    # marginal means
    geom_point(data = exp2j_aov_stim,
               aes(y = emmean),
               size = 3,
               shape = 21) +
    
    # annotations
    annotate(
      geom = "text",
      label = c("marginal means"),
      x = c(1.5),
      y = 10
    ) +
    
    # effect lines
    geom_segment(
      data = data.table(
        x = c(1 - nudge, 1.5 + nudge, 2 + nudge),
        y = c(b[1] + b[2] + b[3] + b[4], # wt rest
              b[1] + b[2],
              b[1] + b[2] - b[3] - b[4]), # ko rest
        xend = c(1 - nudge, 1.5 + nudge, 2 + nudge),
        yend = c(b[1] - b[2] + b[3] - b[4], #wt stim
                 b[1] - b[2],
                 b[1] - b[2] - b[3] + b[4]) # ko stim
      ),
      aes(x = x,
          y = y,
          xend = xend,
          yend = yend),
      color = "black") +
    
    # effect annotations
    annotate(geom = "text",
             label = c("effect of\nstimulation\nin WT"),
             x = c(.7),
             y = c(11)) +
    geom_curve(x = .7,
               y = 10.3,
               xend = 1 - nudge*1.2,
               yend = 9,
               arrow = arrow(length = unit(0.03, "npc")),
               color = "black",
               curvature = 0.3) +
    
    annotate(geom = "text",
             label = c("effect of\nstimulation\nin KO"),
             x = c(2.3),
             y = c(11)) +
    geom_curve(x = 2.3,
               y = 10.3,
               xend = 2 + nudge*1.2,
               yend = 8.3,
               arrow = arrow(length = unit(0.03, "npc")),
               color = "black",
               curvature = -0.3) +
    
    annotate(geom = "text",
             label = c("mean effect of\nstimulation"),
             x = c(1.75),
             y = c(11.5)) +
    geom_curve(x = 1.75,
               y = 11.0,
               xend = 1.5 + nudge*1.2,
               yend = 8.6,
               arrow = arrow(length = unit(0.03, "npc")),
               color = "black",
               curvature = -0.2) +
    
    scale_color_manual(values = pal_okabe_ito_blue) +
    #  scale_x_discrete(labels = c("WT", "TLR9-/-")) +
    ylab(expression(paste("Glucose uptake (nmol mg ", protein^-1, "15 ", min^-1, ")"))) +
    coord_cartesian(ylim = c(5.0, 11.5)) +
    
    theme_pubr() +
    theme(axis.title.x = element_blank(),
          legend.title = element_blank()) +
    
    NULL
  
  return(gg)
}
# gg
```

```{r twoway-anova-explainer-plot, echo=FALSE, fig.dim=std_dim, message=FALSE, fig.cap = "The main effect of stimulation in the ANOVA table tests the average of the conditional effects of stimulation. The average of the conditional effects is the difference between the marginal means of Active and of Rest."}

# image_path <- here("images", "twoway-main-1.png")
# knitr::include_graphics(image_path)
gg_anova_explainer <- anova_build_gg()
gg_anova_explainer
```

## More issues in inference
### Longitudinal experiments -- include Time as a random factor (better than repeated measures ANOVA)

## Working in R
### Model formula

A linear model with two crossed factors is specified in the model formula as `y ~ A*B` where $\texttt{A}$ is the first factor, and $\texttt{B}$ is the second factor. R expands this formula to `y ~ 1 + A + B + A:B` where the colon indicates an interaction (multiplicative) effect.

```{r twoway-working-m1}
m1 <- lm(glucose_uptake ~ stimulation * genotype, data = exp2j)
```

```{r twoway-working-m1-show, echo=FALSE}
tidy(m1, conf.int = TRUE) |>
  kable(digits = c(1,2,3,2,7,2,2)) |>
  kable_styling()
```

The order of the factors in the model formula doesn't matter for the values of the coefficients, the estimated marginal means, or the contrasts. It can matter for ANOVA (more on this below) but not "tests after ANOVA".

```{r twoway-working-m1_b}
m1_b <- lm(glucose_uptake ~ genotype * stimulation, data = exp2j)
```


```{r twoway-working-m1_b-show, echo=FALSE}
tidy(m1_b, conf.int = TRUE) |>
  kable(digits = c(1,2,3,2,7,2,2)) |>
  kable_styling()
```

The additive model is specified by the formula `y ~ A + B`

```{r twoway-working-m2}
m2 <- lm(glucose_uptake ~ stimulation + genotype, data = exp2j)
```


```{r twoway-working-m2-show, echo=FALSE}
tidy(m2, conf.int = TRUE) |>
  kable(digits = c(1,2,3,2,7,2,2)) |>
  kable_styling()

```
### Using the emmeans function
#### Conditional means table

```{r twoway-emm}
# model m1 fit above
# m1 <- lm(glucose_uptake ~ stimulation * genotype, data = exp2j)

m1_emm <- emmeans(m1, specs = c("stimulation", "genotype"))

m1_emm
```

```{r twoway-emm-show, echo=FALSE, eval=FALSE}
# do not run, specifically want to show the emm result
m1_emm |>
  kable(digits = c(1,1,2,3,1,2,2)) |>
  kable_styling()
```

Notes

1. Printing the `emmeans` object displays useful information. Here, this information includes the confidence level used. If the object is printed using `kable() |> kable_styling()` (as in the "Inference" and "Understanding" sections above), only the table is printed and the additional information is lost.
2. `emmeans` computes the modeled means of all combinations of the levels of the factor variables specified in `specs`.
3. If there are two factor variables in the model, and both are passed to `specs`, then the modeled means of all combinations of the levels of the two variables are computed. If only one factor variable is passed, then the marginal means (averaged over all levels of the missing factor) are computed (see below).

#### Marginal means

```{r twoway-working-emm_stimulation, message=TRUE, warning=TRUE}
m1_emm_stimulation <- emmeans(m1, specs = c("stimulation"))
m1_emm_stimulation
```
Notes

1. In a model with two crossed factors, `y ~ A * B`, the marginal means of the levels of $\texttt{A}$, averaged over all levels of $\texttt{B}$ are computed by setting `specs =` to $\texttt{A}$ only.
2. Remember that the `specs` argument sets the values of the predictors for which we want a mean. By excluding $\texttt{B}$, we don't get the means of the levels of $\texttt{A}$ at each level of $\texttt{B}$ but averaged across the levels of $\texttt{B}$.`emmeans` "knows" to average across the levels of $\texttt{B}$ because $\texttt{B}$ is in the model.

### Contrasts

#### Planned contrasts {#twoway-working-planned}

```{r twoway-working-planned}
wt_rest <- c(1,0,0,0)
wt_active <- c(0,1,0,0)
ko_rest <- c(0,0,1,0)
ko_active <- c(0,0,0,1)

m1_planned <- contrast(
  m1_emm,
  method = list(
    "(WT/Active - WT/Rest)" = c(wt_active - wt_rest),
    "(KO/Rest - WT/Rest)" = c(ko_rest - wt_rest),
    "(KO/Active - WT/Active)" = c(ko_active - wt_active),
    "KO:Active Ixn" = c(ko_active - wt_active) -
      (ko_rest - wt_rest)
  ),
  adjust = "none"
) |>
  summary(infer = TRUE)
```

```{r twoway-working-planned-show, echo=FALSE}
m1_planned |>
  kable(digits = c(1,2,3,1,2,2,2,4)) |>
  kable_styling()
```


#### All pairwise effects

```{r twoway-working-pairs}
m1_pairs <- contrast(m1_emm,
                     method = "revpairwise",
                     adjust = "tukey",
                     level = 0.95) |>
  summary(infer = TRUE) # add the 95% CIs

m1_pairs
```

Notes

1. Note that printing the `contrast` object displays useful information, including the method of adjustment for multiple tests. If the object is printed using `kable() |> kable_styling()` (as in the "Inference" and "Understanding" sections above), only the table is printed and the additional information is lost.
2. The `method` argument is used to control the set of contrasts that are computed. See below.
3. The `adjust` argument controls if and how to adjust for multiple tests. Each `method` has a default adjustment method. See below.
4. The `level` argument controls the percentile boundaries of the confidence interval. The default is 0.95. Including this argument with this value makes this level transparent.

#### Simple effects

```{r twoway-working-simple}
m1_simple <- contrast(m1_emm,
                     method = "revpairwise",
                     simple = "each",
                     combine = TRUE,
                     adjust = "fdr") |>
  summary(infer = TRUE) # add the 95% CIs
```


```{r twoway-working-simple-show, echo=FALSE}
m1_simple |>
#  mutate(p.value = fmt_p_value_rmd(p.value)) |>
  kable(digits = c(1,1,1,2,3,1,2,2,2,4)) |>
  kable_styling()
```

#### Interaction contrasts {#twoway-working-ixn}

The interaction contrasts can be computed as in [Planned contrasts](#twoway-working-planned) above or using the argument "interaction = "

```{r twoway-working-ixn}
m1_ixn <- contrast(m1_emm,
                     interaction = "revpairwise",
                     adjust = "none") |>
  summary(infer = TRUE) # add the 95% CIs
```


```{r twoway-working-ixn-show, echo=FALSE}
m1_ixn |>
  kable(digits = c(1,1,2,3,1,2,2,2,4)) |>
  kable_styling()
```

#### Method argument

```{r}
m1_pairs <- contrast(m1_emm,
                     method = "pairwise",
                     adjust = "fdr") |>
  summary(infer = TRUE) # add the 95% CIs

m1_pairs |>
  kable() |>
  kable_styling()
```

```{r}
m1_pairs <- contrast(m1_emm,
                     method = "trt.vs.ctrl",
                     adjust = "none") |>
  summary(infer = TRUE) # add the 95% CIs

m1_pairs |>
  kable() |>
  kable_styling()
```

Notes

1. `method = "pairwise"` and `method = "revpairwise"` compute all pairwise comparisons. I prefer "revpairwise" because the contrasts that include the reference are in the direction non-reference minus reference.
2. `method = "trt.vs.ctrl"` gives a very flattened picture of the model results and constrains what we can infer from the results.

#### Adjustment for multiple tests

set the `adjust =` argument to 

1. "none" -- no adjustment
2. "dunnettx" -- [Dunnett's test](https://en.wikipedia.org/wiki/Dunnett%27s_test){target="_blank"} is a method used when comparing all treatments to a single control. For a factorial design, this only makes sense for a flattened analysis.
3. "tukey" -- [Tukey's HSD method](https://en.wikipedia.org/wiki/Tukey%27s_range_test){target="_blank"} is a method used to compare all pairwise comparisons.
4. "bonferroni" -- [Bonferroni](https://en.wikipedia.org/wiki/Bonferroni_correction){target="_blank"} is a general purpose method to compare any set of multiple tests. The test is conservative. A better method is "holm"
5. "holm" -- [Holm-Bonferroni](https://en.wikipedia.org/wiki/Holm–Bonferroni_method){target="_blank"} is a general purpose method like the Bonferroni but is more powerful.
6. "fdr" -- controls the [false discovery rate](https://en.wikipedia.org/wiki/False_discovery_rate){target="_blank"} not the Type I error rate for a family of tests. One might use this in an exploratory experiment.
7. "mvt" -- based on the multivariate *t* distribution and using covariance structure of the variables.

### Practice safe ANOVA

Many researchers are unaware of the different ways of computing the sum of squares in an ANOVA table. The *F*-value and *p*-value are both functions of the sum of squares. When the cells of a two-way ANOVA are not balanced (different sample sizes among the cells), the different ways of computing the sum of squares can matter. There is a great deal of sound and fury about which methods should be used and which avoided. For many research questions and the experiments used to address these, these arguments are moot because the ANOVA table is simply unnecessary for inference. Instead, fit the linear model and compute the contrasts of interest.

If your reviewer/advisor/boss wants an ANOVA table and wants this table to match that in Graphpad Prism or JMP, then you need a table computed from Type III sum of squares. If using a linear model to compute the ANOVA (remember that ANOVA was developed without fitting linear models), then the linear model needs to be fit using a model matrix constructed with indicator variables using effects coding. There are two safe ways to do this in R.

#### The afex aov_4 function

```{r twoway-aov_4, warning=FALSE, message = FALSE}
# .I is a data.table function that returns the row number
exp2j[, fake_id := paste("mouse", .I)]

m1_aov4 <- aov_4(glucose_uptake ~ stimulation * genotype +
                   (1|fake_id),
                 data = exp2j)

nice(m1_aov4, MSE = FALSE)[,-4] |> # delete ges column
  kable() |>
  kable_styling()
```

Notes

1. The afex package has three function names for generating the same ANOVA table and statistics -- here I'm using `aov_4` because this functions uses a linear model formula argument (specifically, that used in the lme4 package), which is consistent with the rest of this text.
2. The formula includes the addition of a random factor (`(1|id)`) even though there really is no random factor in this model. See [Models with random factors -- Blocking and pseudoreplication](#lmm) for more information on random factors. The random factor (the factor variable "id" created in the line before the fit model line) identifies the individual mouse from which the response variable was measured. Because the response was only measured once on each individual mouse, "id" is not really a random factor but the addition of this in the model formula is necessary for the `aov_4` function to work.

#### The car Anova function {#twoway-car-anova}

```{r twoway-car-Anova}
type3 <- list(stimulation = contr.sum,
              genotype = contr.sum)
m1_type3 <- lm(glucose_uptake ~ stimulation * genotype,
               data = exp2j,
               contrasts = type3)
Anova(m1_type3, type="3")[-1, -1] |> # delete row 1 and col 1
  kable(digits = c(1,2,5)) |>
  kable_styling()
```

Notes

1. `car::Anova` has arguments for reporting the Type II and Type III sum of squares.
2. Background: The default model matrix in the `lm` function uses dummy (or treatment) coding. For a Type 3 SS ANOVA (the kind that matches that in Graphpad Prism or JMP), we need to tell `lm` to use sum (or deviation) coding.
3. The best practice method for changing the contrasts in the model matrix is using the `contrasts` argument within the `lm` function, as in the code above to fit `m1_type3`. This is the safest practice because this sets the contrasts only for this specific fit.
4. The coefficients of `m1_type3` will be different from those using the default contrasts. Except when computing a Type III ANOVA, this text uses the default contrasts throughout because the coefficients make sense for the kinds of experiments in experimental biology. If using sum ("type III") coding, the intercept will be the grand mean and the coefficients of the non-reference levels (the effects) will be their deviations from the grand mean. I don't find this definition of "effects" very useful for most experiments in biology (but "useful" is largely a function of "used to").
5. The contrasts (differences in the means among pairs of groups) in the contrast table will be the same, regardless of the contrast coding.

<div style="background-color:#cccccc; text-align:left; vertical-align: middle; padding:20px 47px;">
Danger!. Many online sites suggest this bit of code before a Type III ANOVA using car::Anova:

`options(contrasts = c("contr.sum", "contr.poly")`

If you're reading this book, you almost certainly don't want to do this because this code resets how R computes coefficients of linear models and SS of ANOVA tables. This will effect all future analysis until the contrasts are set to something else or a new R session is started. 
</div>

### Better to avoid these

```{r twoway-aov}
m1_aov <- aov(glucose_uptake ~ stimulation * genotype,
               data = exp2j)
summary(m1_aov)
```

```{r twoway-anova}
# same as exp2j_m1 in the Example 1 section
m1 <- lm(glucose_uptake ~ stimulation * genotype,
               data = exp2j)
anova(m1)
```

Notes

1. Note the differences from the the afex table and the car Anova table. The *p*-values for the interaction term is the same -- this will always be the case for the highest order interaction term in the model. The *p*-values for $\texttt{stimulation}$ and $\texttt{genotype}$ terms are different. The difference will be a function of the degree of imbalance. Here, this difference doesn't make a difference for inference. In some data sets, the difference is catastrophic.
2. Many introduction to statistics textbooks and websites teach the base R `aov` function. This function is only useful if 1) the data are balanced and 2) we care about ANOVA. Don't use this. If you need the ANOVA table use either afex or car Anova.
2. The base R `anova` is useful if you know what you are doing with it. Otherwise, use either afex or car Anova. 

## Hidden Code
### Import exp2j (Example 1)

```{r twoway-exp2j-import-show, echo=TRUE}
data_from <- "TLR9 and beclin 1 crosstalk regulates muscle AMPK activation in exercise"
file_name <- "41586_2020_1992_MOESM4_ESM.xlsx"

file_path <- here(data_folder, data_from, file_name)

treatment_levels  <- c("WT Rest",
                       "WT Active",
                       "KO Rest",
                       "KO Active")
exp2j_wide <- read_excel(file_path,
                         sheet = "2j",
                         range = "A5:D13",
                         col_names = TRUE) |>
  data.table()

colnames(exp2j_wide) <- treatment_levels

exp2j <- melt(exp2j_wide,
              measure.vars = treatment_levels,
              variable.name = "treatment",
              value.name = "glucose_uptake") |>
  na.omit() # danger!

exp2j[, c("genotype", "stimulation") := tstrsplit(treatment,
                                                  " ",
                                                  fixed = TRUE)]

genotype_levels <- c("WT", "KO")
stimulation_levels <- c("Rest", "Active")
exp2j[, genotype := factor(genotype,
                           levels = genotype_levels)]
exp2j[, stimulation := factor(stimulation,
                              levels = stimulation_levels)]
# View(exp2j)
```


### Import exp3e lesian area data (Example 2)

```{r twoway-exp3e-import-show, message=FALSE, echo=TRUE}

data_from <- "XX sex chromosome complement promotes atherosclerosis in mice"
file_name <- "41467_2019_10462_MOESM6_ESM.xlsx"
file_path <- here(data_folder, data_from, file_name)

# fig 3e
exp3e_wide <- read_excel(file_path,
                  sheet = "Figure 3E",
                  range = "A3:K4",
                  col_names = FALSE) |>
  data.table() |>
  transpose(make.names = 1)

sex_levels <- colnames(exp3e_wide)
exp3e <- melt(exp3e_wide,
              measure.vars = sex_levels,
              variable.name = "sex",
              value.name = "lesian_area")

# convert lesian_area to mm^2 from µm^2
exp3e[, lesian_area := lesian_area/10^6]

# convert sex variable to factor
exp3e[, sex := factor(sex,
                        levels = sex_levels)]

# create chromosome column and convert to factor
chromosome_levels <- c("XX", "XY")
exp3e[, chromosome := rep(rep(chromosome_levels, each = 5), 2)]
exp3e[, chromosome := factor(chromosome,
                             levels = chromosome_levels)]

# researchers treatment levels
exp3e[, treatment := rep(c("FXX", "FXY", "MXX", "MXY"), each = 5)]

# two rows with missing response so delte these rows as there is 
# no useful information in them
exp3e <- na.omit(exp3e) # be careful with a global na.omit

# View(exp3e) # highlight and run to see data
```

### Import Exp1c JA data (Example 3)

```{r twoway-ja-import-show, echo=TRUE, warning=FALSE, message=FALSE}

data_from <- "Integration of two herbivore-induced plant volatiles results in synergistic effects on plant defense and resistance"
file_name <- "Data for Dryad.xlsx"
file_path <- here(data_folder, data_from, file_name)

exp1 <- read_excel(file_path,
                     sheet = "Fig. 1",
                     range = "A3:K23", # 1 blank column
                     col_names = TRUE) |>
  data.table() |>
  clean_names()

setnames(exp1, old = "treat", new = "treatment")

exp1[treatment == "Control", c("hac", "indole") := list("HAC-", "Indole-")]
exp1[treatment == "HAC", c("hac", "indole") := list("HAC+", "Indole-")]
exp1[treatment == "Indole", c("hac", "indole") := list("HAC-", "Indole+")]
exp1[treatment == "HAC+Indole", c("hac", "indole") := list("HAC+", "Indole+")]

treatment_levels <- c("Control", "HAC", "Indole", "HAC+Indole")
exp1[, treatment := factor(treatment,
                           levels = treatment_levels)]
exp1[, hac := factor(hac)] # levels in correct order
exp1[, indole := factor(indole)] # levels in correct order
# View(exp1)
```

